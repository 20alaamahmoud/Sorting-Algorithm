
Sorting-Algorithm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000d96  00000e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800074  00800074  00000e3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a0  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7b  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c7d  00000000  00000000  00003013  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00003c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000534  00000000  00000000  00003f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de5  00000000  00000000  0000444c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00005231  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 8c 03 	jmp	0x718	; 0x718 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b9 02 	call	0x572	; 0x572 <main>
  8a:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Userinput>:
#include "Functions.h"
void Userinput(int Number[],int *num)
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	6c 01       	movw	r12, r24
  a4:	7b 01       	movw	r14, r22
	int count_digit=0; // count_digit : to count number of digits user input
	int digit;	//digit: user to convert to decimal	
	bool check=TRUE; //check if user press + one time	
	uint8 value;	
	*num=0;
  a6:	db 01       	movw	r26, r22
  a8:	1d 92       	st	X+, r1
  aa:	1c 92       	st	X, r1
#include "Functions.h"
void Userinput(int Number[],int *num)
{
	int count_digit=0; // count_digit : to count number of digits user input
	int digit;	//digit: user to convert to decimal	
	bool check=TRUE; //check if user press + one time	
  ac:	d1 e0       	ldi	r29, 0x01	; 1
#include "Functions.h"
void Userinput(int Number[],int *num)
{
	int count_digit=0; // count_digit : to count number of digits user input
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	10 e0       	ldi	r17, 0x00	; 0
	int digit;	//digit: user to convert to decimal	
	bool check=TRUE; //check if user press + one time	
	uint8 value;	
	*num=0;
	do{
		value=keypad_get_value(); /*scan value from keypad*/
  b2:	0e 94 91 01 	call	0x322	; 0x322 <keypad_get_value>
  b6:	c8 2f       	mov	r28, r24
		if (value)
  b8:	88 23       	and	r24, r24
  ba:	09 f4       	brne	.+2      	; 0xbe <Userinput+0x2c>
  bc:	52 c0       	rjmp	.+164    	; 0x162 <Userinput+0xd0>
		{
			if (value >='0' && value <='9' && count_digit < 4) //check if input  number or not
  be:	80 ed       	ldi	r24, 0xD0	; 208
  c0:	8c 0f       	add	r24, r28
  c2:	8a 30       	cpi	r24, 0x0A	; 10
  c4:	88 f5       	brcc	.+98     	; 0x128 <Userinput+0x96>
  c6:	04 30       	cpi	r16, 0x04	; 4
  c8:	11 05       	cpc	r17, r1
  ca:	74 f5       	brge	.+92     	; 0x128 <Userinput+0x96>
			{
				digit = value - '0';
  cc:	8c 2f       	mov	r24, r28
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	ac 01       	movw	r20, r24
  d2:	40 53       	subi	r20, 0x30	; 48
  d4:	51 09       	sbc	r21, r1
				Number[*num] = (Number[*num] * 10) + digit;
  d6:	d7 01       	movw	r26, r14
  d8:	ed 91       	ld	r30, X+
  da:	fc 91       	ld	r31, X
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	ec 0d       	add	r30, r12
  e2:	fd 1d       	adc	r31, r13
  e4:	80 81       	ld	r24, Z
  e6:	91 81       	ldd	r25, Z+1	; 0x01
  e8:	bc 01       	movw	r22, r24
  ea:	66 0f       	add	r22, r22
  ec:	77 1f       	adc	r23, r23
  ee:	9c 01       	movw	r18, r24
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	cb 01       	movw	r24, r22
  fe:	82 0f       	add	r24, r18
 100:	93 1f       	adc	r25, r19
 102:	84 0f       	add	r24, r20
 104:	95 1f       	adc	r25, r21
 106:	91 83       	std	Z+1, r25	; 0x01
 108:	80 83       	st	Z, r24
				count_digit++;
 10a:	0f 5f       	subi	r16, 0xFF	; 255
 10c:	1f 4f       	sbci	r17, 0xFF	; 255
				LCD_Char(value);
 10e:	8c 2f       	mov	r24, r28
 110:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_Char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	bf ef       	ldi	r27, 0xFF	; 255
 116:	e4 e3       	ldi	r30, 0x34	; 52
 118:	fc e0       	ldi	r31, 0x0C	; 12
 11a:	b1 50       	subi	r27, 0x01	; 1
 11c:	e0 40       	sbci	r30, 0x00	; 0
 11e:	f0 40       	sbci	r31, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <Userinput+0x88>
 122:	00 c0       	rjmp	.+0      	; 0x124 <Userinput+0x92>
 124:	00 00       	nop
				_delay_ms(250);
				check=TRUE;
 126:	d1 e0       	ldi	r29, 0x01	; 1
			}
			if (value == '+') //check if user input more than 4 digit or user input other number
 128:	cb 32       	cpi	r28, 0x2B	; 43
 12a:	d9 f4       	brne	.+54     	; 0x162 <Userinput+0xd0>
			{
				LCD_Char(' ');
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_Char>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	80 e7       	ldi	r24, 0x70	; 112
 136:	92 e0       	ldi	r25, 0x02	; 2
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <Userinput+0xa6>
 140:	00 c0       	rjmp	.+0      	; 0x142 <Userinput+0xb0>
 142:	00 00       	nop
				count_digit=0;
				_delay_ms(50);
				if (check) //To avoid increase size of array when button + pressed more one
 144:	dd 23       	and	r29, r29
 146:	59 f0       	breq	.+22     	; 0x15e <Userinput+0xcc>
				{
					 (*num)++;
 148:	d7 01       	movw	r26, r14
 14a:	8d 91       	ld	r24, X+
 14c:	9c 91       	ld	r25, X
 14e:	11 97       	sbiw	r26, 0x01	; 1
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	8d 93       	st	X+, r24
 154:	9c 93       	st	X, r25
					check=FALSE;
 156:	d0 e0       	ldi	r29, 0x00	; 0
				check=TRUE;
			}
			if (value == '+') //check if user input more than 4 digit or user input other number
			{
				LCD_Char(' ');
				count_digit=0;
 158:	00 e0       	ldi	r16, 0x00	; 0
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <Userinput+0xd0>
 15e:	00 e0       	ldi	r16, 0x00	; 0
 160:	10 e0       	ldi	r17, 0x00	; 0
					 (*num)++;
					check=FALSE;
				}
			}
		}
	}while (value != 'E');
 162:	c5 34       	cpi	r28, 0x45	; 69
 164:	09 f0       	breq	.+2      	; 0x168 <Userinput+0xd6>
 166:	a5 cf       	rjmp	.-182    	; 0xb2 <Userinput+0x20>
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	ff 90       	pop	r15
 172:	ef 90       	pop	r14
 174:	df 90       	pop	r13
 176:	cf 90       	pop	r12
 178:	08 95       	ret

0000017a <bubbleSort>:
void bubbleSort(int arr[], int size) {
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
	int i, j;
	for (i = 0; i < size - 1; i++) {
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	d0 e0       	ldi	r29, 0x00	; 0
 186:	25 c0       	rjmp	.+74     	; 0x1d2 <bubbleSort+0x58>
		for (j = 0; j < size - i - 1; j++) {
			if (arr[j] > arr[j + 1]) {
 188:	d9 01       	movw	r26, r18
 18a:	aa 0f       	add	r26, r26
 18c:	bb 1f       	adc	r27, r27
 18e:	a8 0f       	add	r26, r24
 190:	b9 1f       	adc	r27, r25
 192:	4d 91       	ld	r20, X+
 194:	5c 91       	ld	r21, X
 196:	11 97       	sbiw	r26, 0x01	; 1
 198:	f9 01       	movw	r30, r18
 19a:	31 96       	adiw	r30, 0x01	; 1
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	e8 0f       	add	r30, r24
 1a2:	f9 1f       	adc	r31, r25
 1a4:	00 81       	ld	r16, Z
 1a6:	11 81       	ldd	r17, Z+1	; 0x01
 1a8:	04 17       	cp	r16, r20
 1aa:	15 07       	cpc	r17, r21
 1ac:	24 f4       	brge	.+8      	; 0x1b6 <bubbleSort+0x3c>
				// Swap elements
				int temp = arr[j];
				arr[j] = arr[j + 1];
 1ae:	0d 93       	st	X+, r16
 1b0:	1c 93       	st	X, r17
				arr[j + 1] = temp;
 1b2:	51 83       	std	Z+1, r21	; 0x01
 1b4:	40 83       	st	Z, r20
	}while (value != 'E');
}
void bubbleSort(int arr[], int size) {
	int i, j;
	for (i = 0; i < size - 1; i++) {
		for (j = 0; j < size - i - 1; j++) {
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <bubbleSort+0x46>
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	ab 01       	movw	r20, r22
 1c2:	4c 1b       	sub	r20, r28
 1c4:	5d 0b       	sbc	r21, r29
 1c6:	41 50       	subi	r20, 0x01	; 1
 1c8:	51 09       	sbc	r21, r1
 1ca:	24 17       	cp	r18, r20
 1cc:	35 07       	cpc	r19, r21
 1ce:	e4 f2       	brlt	.-72     	; 0x188 <bubbleSort+0xe>
		}
	}while (value != 'E');
}
void bubbleSort(int arr[], int size) {
	int i, j;
	for (i = 0; i < size - 1; i++) {
 1d0:	21 96       	adiw	r28, 0x01	; 1
 1d2:	9b 01       	movw	r18, r22
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	31 09       	sbc	r19, r1
 1d8:	c2 17       	cp	r28, r18
 1da:	d3 07       	cpc	r29, r19
 1dc:	7c f3       	brlt	.-34     	; 0x1bc <bubbleSort+0x42>
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <Display_sort_Number>:
void Display_sort_Number(int Number[],int num)
{
 1e8:	af 92       	push	r10
 1ea:	bf 92       	push	r11
 1ec:	cf 92       	push	r12
 1ee:	df 92       	push	r13
 1f0:	ef 92       	push	r14
 1f2:	ff 92       	push	r15
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <Display_sort_Number+0x16>
 1fe:	00 d0       	rcall	.+0      	; 0x200 <Display_sort_Number+0x18>
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	6c 01       	movw	r12, r24
 206:	7b 01       	movw	r14, r22
int i;
char str[4]; //To covert int to string 
if (num > 0)
 208:	16 16       	cp	r1, r22
 20a:	17 06       	cpc	r1, r23
 20c:	0c f0       	brlt	.+2      	; 0x210 <Display_sort_Number+0x28>
 20e:	42 c0       	rjmp	.+132    	; 0x294 <Display_sort_Number+0xac>
{
	LCD_Clear();
 210:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_Clear>
	bubbleSort(Number,num+1);
 214:	b7 01       	movw	r22, r14
 216:	6f 5f       	subi	r22, 0xFF	; 255
 218:	7f 4f       	sbci	r23, 0xFF	; 255
 21a:	c6 01       	movw	r24, r12
 21c:	0e 94 bd 00 	call	0x17a	; 0x17a <bubbleSort>
	for (i = 0; i <=num; i++)
 220:	00 e0       	ldi	r16, 0x00	; 0
 222:	10 e0       	ldi	r17, 0x00	; 0
 224:	34 c0       	rjmp	.+104    	; 0x28e <Display_sort_Number+0xa6>
	{
		LCD_Char(' ');
 226:	80 e2       	ldi	r24, 0x20	; 32
 228:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_Char>
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	84 e3       	ldi	r24, 0x34	; 52
 230:	9c e0       	ldi	r25, 0x0C	; 12
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <Display_sort_Number+0x4a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <Display_sort_Number+0x54>
 23c:	00 00       	nop
		_delay_ms(250);
		sprintf(str, "%d", Number[i]);
 23e:	f8 01       	movw	r30, r16
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	ec 0d       	add	r30, r12
 246:	fd 1d       	adc	r31, r13
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	8f 93       	push	r24
 24c:	80 81       	ld	r24, Z
 24e:	8f 93       	push	r24
 250:	80 e6       	ldi	r24, 0x60	; 96
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	9f 93       	push	r25
 256:	8f 93       	push	r24
 258:	ce 01       	movw	r24, r28
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	5c 01       	movw	r10, r24
 25e:	9f 93       	push	r25
 260:	8f 93       	push	r24
 262:	0e 94 df 03 	call	0x7be	; 0x7be <sprintf>
 266:	9f ef       	ldi	r25, 0xFF	; 255
 268:	29 e6       	ldi	r18, 0x69	; 105
 26a:	88 e1       	ldi	r24, 0x18	; 24
 26c:	91 50       	subi	r25, 0x01	; 1
 26e:	20 40       	sbci	r18, 0x00	; 0
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <Display_sort_Number+0x84>
 274:	00 c0       	rjmp	.+0      	; 0x276 <Display_sort_Number+0x8e>
 276:	00 00       	nop
		_delay_ms(500);
		LCD_String(str);
 278:	c5 01       	movw	r24, r10
 27a:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_String>
char str[4]; //To covert int to string 
if (num > 0)
{
	LCD_Clear();
	bubbleSort(Number,num+1);
	for (i = 0; i <=num; i++)
 27e:	0f 5f       	subi	r16, 0xFF	; 255
 280:	1f 4f       	sbci	r17, 0xFF	; 255
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	e0 16       	cp	r14, r16
 290:	f1 06       	cpc	r15, r17
 292:	4c f6       	brge	.-110    	; 0x226 <Display_sort_Number+0x3e>
 294:	00 e0       	ldi	r16, 0x00	; 0
 296:	10 e0       	ldi	r17, 0x00	; 0
 298:	0b c0       	rjmp	.+22     	; 0x2b0 <Display_sort_Number+0xc8>
		LCD_String(str);
	}
}
for (i = 0; i <=num; i++)
{
	seven_segment_number(Number[i]);
 29a:	f8 01       	movw	r30, r16
 29c:	ee 0f       	add	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	ec 0d       	add	r30, r12
 2a2:	fd 1d       	adc	r31, r13
 2a4:	80 81       	ld	r24, Z
 2a6:	91 81       	ldd	r25, Z+1	; 0x01
 2a8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <seven_segment_number>
		sprintf(str, "%d", Number[i]);
		_delay_ms(500);
		LCD_String(str);
	}
}
for (i = 0; i <=num; i++)
 2ac:	0f 5f       	subi	r16, 0xFF	; 255
 2ae:	1f 4f       	sbci	r17, 0xFF	; 255
 2b0:	e0 16       	cp	r14, r16
 2b2:	f1 06       	cpc	r15, r17
 2b4:	94 f7       	brge	.-28     	; 0x29a <Display_sort_Number+0xb2>
{
	seven_segment_number(Number[i]);
}
seven_segment_Init();
 2b6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <seven_segment_Init>
}
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	df 90       	pop	r13
 2d0:	cf 90       	pop	r12
 2d2:	bf 90       	pop	r11
 2d4:	af 90       	pop	r10
 2d6:	08 95       	ret

000002d8 <keypad_Init>:
							/*row 3 [7-8-9-/*/ /*row 2 [4-5-6-* *//*row 1 [1-2-3- '-' *//*row 0 [ON-0- = - +*/
	
void keypad_Init()
{
	/*set pins cols as input*/
	CLR_BIT(DDRD,PIN7);
 2d8:	81 b3       	in	r24, 0x11	; 17
 2da:	8f 77       	andi	r24, 0x7F	; 127
 2dc:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,PIN6);
 2de:	81 b3       	in	r24, 0x11	; 17
 2e0:	8f 7b       	andi	r24, 0xBF	; 191
 2e2:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,PIN5);
 2e4:	81 b3       	in	r24, 0x11	; 17
 2e6:	8f 7d       	andi	r24, 0xDF	; 223
 2e8:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,PIN3);
 2ea:	81 b3       	in	r24, 0x11	; 17
 2ec:	87 7f       	andi	r24, 0xF7	; 247
 2ee:	81 bb       	out	0x11, r24	; 17
	/*set pins of rows as output*/
	SET_BIT(DDRC,PIN5);
 2f0:	84 b3       	in	r24, 0x14	; 20
 2f2:	80 62       	ori	r24, 0x20	; 32
 2f4:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,PIN4);
 2f6:	84 b3       	in	r24, 0x14	; 20
 2f8:	80 61       	ori	r24, 0x10	; 16
 2fa:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,PIN3);
 2fc:	84 b3       	in	r24, 0x14	; 20
 2fe:	88 60       	ori	r24, 0x08	; 8
 300:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,PIN2);
 302:	84 b3       	in	r24, 0x14	; 20
 304:	84 60       	ori	r24, 0x04	; 4
 306:	84 bb       	out	0x14, r24	; 20
	/* set col pull up*/
	SET_BIT(PORTD,PIN7);
 308:	82 b3       	in	r24, 0x12	; 18
 30a:	80 68       	ori	r24, 0x80	; 128
 30c:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,PIN6);
 30e:	82 b3       	in	r24, 0x12	; 18
 310:	80 64       	ori	r24, 0x40	; 64
 312:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,PIN5);
 314:	82 b3       	in	r24, 0x12	; 18
 316:	80 62       	ori	r24, 0x20	; 32
 318:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,PIN3);
 31a:	82 b3       	in	r24, 0x12	; 18
 31c:	88 60       	ori	r24, 0x08	; 8
 31e:	82 bb       	out	0x12, r24	; 18
 320:	08 95       	ret

00000322 <keypad_get_value>:
	
}
unsigned char keypad_get_value(void)
{
	unsigned char col, row, ans = INVALID_KEYPAD_PRESS;
 322:	8f ef       	ldi	r24, 0xFF	; 255
	for (row = 5 ; row>=2 ; row--)
 324:	e5 e0       	ldi	r30, 0x05	; 5
 326:	62 c0       	rjmp	.+196    	; 0x3ec <keypad_get_value+0xca>
	{
		PORTC |= 0b00111100; /*write High on all row*/
 328:	95 b3       	in	r25, 0x15	; 21
 32a:	9c 63       	ori	r25, 0x3C	; 60
 32c:	95 bb       	out	0x15, r25	; 21
		
		CLR_BIT(PORTC,row); /*write low on one row*/
 32e:	95 b3       	in	r25, 0x15	; 21
 330:	6e 2f       	mov	r22, r30
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	21 e0       	ldi	r18, 0x01	; 1
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	0e 2e       	mov	r0, r30
 33a:	02 c0       	rjmp	.+4      	; 0x340 <keypad_get_value+0x1e>
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <keypad_get_value+0x1a>
 344:	20 95       	com	r18
 346:	29 23       	and	r18, r25
 348:	25 bb       	out	0x15, r18	; 21
		
		for(col=7 ; col>=3 ; col--)
 34a:	97 e0       	ldi	r25, 0x07	; 7
 34c:	4b c0       	rjmp	.+150    	; 0x3e4 <keypad_get_value+0xc2>
		{
			if(col==4)
 34e:	94 30       	cpi	r25, 0x04	; 4
 350:	09 f4       	brne	.+2      	; 0x354 <keypad_get_value+0x32>
			col--;
 352:	91 50       	subi	r25, 0x01	; 1
			
			if(GET_BIT(PIND,col)==0)
 354:	20 b3       	in	r18, 0x10	; 16
 356:	49 2f       	mov	r20, r25
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	09 2e       	mov	r0, r25
 35e:	02 c0       	rjmp	.+4      	; 0x364 <keypad_get_value+0x42>
 360:	35 95       	asr	r19
 362:	27 95       	ror	r18
 364:	0a 94       	dec	r0
 366:	e2 f7       	brpl	.-8      	; 0x360 <keypad_get_value+0x3e>
 368:	20 fd       	sbrc	r18, 0
 36a:	3b c0       	rjmp	.+118    	; 0x3e2 <keypad_get_value+0xc0>
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	3b ed       	ldi	r19, 0xDB	; 219
 370:	f5 e0       	ldi	r31, 0x05	; 5
 372:	21 50       	subi	r18, 0x01	; 1
 374:	30 40       	sbci	r19, 0x00	; 0
 376:	f0 40       	sbci	r31, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <keypad_get_value+0x50>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <keypad_get_value+0x5a>
 37c:	00 00       	nop
			{
				_delay_ms(120);
				if(GET_BIT(PIND,col)==0)
 37e:	20 b3       	in	r18, 0x10	; 16
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	09 2e       	mov	r0, r25
 384:	02 c0       	rjmp	.+4      	; 0x38a <keypad_get_value+0x68>
 386:	35 95       	asr	r19
 388:	27 95       	ror	r18
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <keypad_get_value+0x64>
 38e:	20 fd       	sbrc	r18, 0
 390:	28 c0       	rjmp	.+80     	; 0x3e2 <keypad_get_value+0xc0>
				{
					if(col==3)
 392:	93 30       	cpi	r25, 0x03	; 3
 394:	99 f4       	brne	.+38     	; 0x3bc <keypad_get_value+0x9a>
					{
						ans=arr[5-row][7-col-1];
 396:	85 e0       	ldi	r24, 0x05	; 5
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	86 1b       	sub	r24, r22
 39c:	97 0b       	sbc	r25, r23
 39e:	26 e0       	ldi	r18, 0x06	; 6
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	24 1b       	sub	r18, r20
 3a4:	35 0b       	sbc	r19, r21
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	8d 59       	subi	r24, 0x9D	; 157
 3b0:	9f 4f       	sbci	r25, 0xFF	; 255
 3b2:	dc 01       	movw	r26, r24
 3b4:	a2 0f       	add	r26, r18
 3b6:	b3 1f       	adc	r27, r19
 3b8:	8c 91       	ld	r24, X
						break;
 3ba:	17 c0       	rjmp	.+46     	; 0x3ea <keypad_get_value+0xc8>
					}
					else
					{
						ans=arr[5-row][7-col];
 3bc:	85 e0       	ldi	r24, 0x05	; 5
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	86 1b       	sub	r24, r22
 3c2:	97 0b       	sbc	r25, r23
 3c4:	27 e0       	ldi	r18, 0x07	; 7
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	24 1b       	sub	r18, r20
 3ca:	35 0b       	sbc	r19, r21
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	8d 59       	subi	r24, 0x9D	; 157
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	dc 01       	movw	r26, r24
 3da:	a2 0f       	add	r26, r18
 3dc:	b3 1f       	adc	r27, r19
 3de:	8c 91       	ld	r24, X
						break;
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <keypad_get_value+0xc8>
	{
		PORTC |= 0b00111100; /*write High on all row*/
		
		CLR_BIT(PORTC,row); /*write low on one row*/
		
		for(col=7 ; col>=3 ; col--)
 3e2:	91 50       	subi	r25, 0x01	; 1
 3e4:	93 30       	cpi	r25, 0x03	; 3
 3e6:	08 f0       	brcs	.+2      	; 0x3ea <keypad_get_value+0xc8>
 3e8:	b2 cf       	rjmp	.-156    	; 0x34e <keypad_get_value+0x2c>
	
}
unsigned char keypad_get_value(void)
{
	unsigned char col, row, ans = INVALID_KEYPAD_PRESS;
	for (row = 5 ; row>=2 ; row--)
 3ea:	e1 50       	subi	r30, 0x01	; 1
 3ec:	e2 30       	cpi	r30, 0x02	; 2
 3ee:	08 f0       	brcs	.+2      	; 0x3f2 <keypad_get_value+0xd0>
 3f0:	9b cf       	rjmp	.-202    	; 0x328 <keypad_get_value+0x6>
				}
			}
		}
	}
	return ans;
 3f2:	08 95       	ret

000003f4 <LCD_Command>:
		break;
		case 3:
		Address=col+0x54;
		break;
	}
	LCD_Command(Address|SET_CURSOR_LOCATION);
 3f4:	98 b3       	in	r25, 0x18	; 24
 3f6:	98 7e       	andi	r25, 0xE8	; 232
 3f8:	98 bb       	out	0x18, r25	; 24
 3fa:	28 2f       	mov	r18, r24
 3fc:	22 95       	swap	r18
 3fe:	2f 70       	andi	r18, 0x0F	; 15
 400:	38 b3       	in	r19, 0x18	; 24
 402:	92 2f       	mov	r25, r18
 404:	98 70       	andi	r25, 0x08	; 8
 406:	49 2f       	mov	r20, r25
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	44 0f       	add	r20, r20
 40c:	55 1f       	adc	r21, r21
 40e:	27 70       	andi	r18, 0x07	; 7
 410:	42 2b       	or	r20, r18
 412:	43 2b       	or	r20, r19
 414:	48 bb       	out	0x18, r20	; 24
 416:	9b b3       	in	r25, 0x1b	; 27
 418:	97 7f       	andi	r25, 0xF7	; 247
 41a:	9b bb       	out	0x1b, r25	; 27
 41c:	9b b3       	in	r25, 0x1b	; 27
 41e:	94 60       	ori	r25, 0x04	; 4
 420:	9b bb       	out	0x1b, r25	; 27
 422:	95 e0       	ldi	r25, 0x05	; 5
 424:	9a 95       	dec	r25
 426:	f1 f7       	brne	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 428:	00 00       	nop
 42a:	9b b3       	in	r25, 0x1b	; 27
 42c:	9b 7f       	andi	r25, 0xFB	; 251
 42e:	9b bb       	out	0x1b, r25	; 27
 430:	ef e3       	ldi	r30, 0x3F	; 63
 432:	ff e1       	ldi	r31, 0x1F	; 31
 434:	31 97       	sbiw	r30, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
 43c:	98 b3       	in	r25, 0x18	; 24
 43e:	98 7e       	andi	r25, 0xE8	; 232
 440:	98 bb       	out	0x18, r25	; 24
 442:	48 b3       	in	r20, 0x18	; 24
 444:	98 2f       	mov	r25, r24
 446:	98 70       	andi	r25, 0x08	; 8
 448:	29 2f       	mov	r18, r25
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	22 0f       	add	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	87 70       	andi	r24, 0x07	; 7
 452:	28 2b       	or	r18, r24
 454:	24 2b       	or	r18, r20
 456:	28 bb       	out	0x18, r18	; 24
 458:	8b b3       	in	r24, 0x1b	; 27
 45a:	84 60       	ori	r24, 0x04	; 4
 45c:	8b bb       	out	0x1b, r24	; 27
 45e:	f5 e0       	ldi	r31, 0x05	; 5
 460:	fa 95       	dec	r31
 462:	f1 f7       	brne	.-4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 464:	00 00       	nop
 466:	8b b3       	in	r24, 0x1b	; 27
 468:	8b 7f       	andi	r24, 0xFB	; 251
 46a:	8b bb       	out	0x1b, r24	; 27
 46c:	8f e3       	ldi	r24, 0x3F	; 63
 46e:	9f e1       	ldi	r25, 0x1F	; 31
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 476:	00 00       	nop
 478:	08 95       	ret

0000047a <LCD_Init>:
 47a:	87 b3       	in	r24, 0x17	; 23
 47c:	87 61       	ori	r24, 0x17	; 23
 47e:	87 bb       	out	0x17, r24	; 23
 480:	8a b3       	in	r24, 0x1a	; 26
 482:	8c 60       	ori	r24, 0x0C	; 12
 484:	8a bb       	out	0x1a, r24	; 26
 486:	8f e5       	ldi	r24, 0x5F	; 95
 488:	9a ee       	ldi	r25, 0xEA	; 234
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <LCD_Init+0x10>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <LCD_Init+0x16>
 490:	00 00       	nop
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_Command>
 498:	88 e2       	ldi	r24, 0x28	; 40
 49a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_Command>
 49e:	8c e0       	ldi	r24, 0x0C	; 12
 4a0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_Command>
 4a4:	86 e0       	ldi	r24, 0x06	; 6
 4a6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_Command>
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_Command>
 4b0:	80 e8       	ldi	r24, 0x80	; 128
 4b2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_Command>
 4b6:	08 95       	ret

000004b8 <LCD_Char>:
 4b8:	98 b3       	in	r25, 0x18	; 24
 4ba:	98 7e       	andi	r25, 0xE8	; 232
 4bc:	98 bb       	out	0x18, r25	; 24
 4be:	28 2f       	mov	r18, r24
 4c0:	22 95       	swap	r18
 4c2:	2f 70       	andi	r18, 0x0F	; 15
 4c4:	38 b3       	in	r19, 0x18	; 24
 4c6:	92 2f       	mov	r25, r18
 4c8:	98 70       	andi	r25, 0x08	; 8
 4ca:	49 2f       	mov	r20, r25
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	44 0f       	add	r20, r20
 4d0:	55 1f       	adc	r21, r21
 4d2:	27 70       	andi	r18, 0x07	; 7
 4d4:	42 2b       	or	r20, r18
 4d6:	43 2b       	or	r20, r19
 4d8:	48 bb       	out	0x18, r20	; 24
 4da:	9b b3       	in	r25, 0x1b	; 27
 4dc:	98 60       	ori	r25, 0x08	; 8
 4de:	9b bb       	out	0x1b, r25	; 27
 4e0:	9b b3       	in	r25, 0x1b	; 27
 4e2:	94 60       	ori	r25, 0x04	; 4
 4e4:	9b bb       	out	0x1b, r25	; 27
 4e6:	95 e0       	ldi	r25, 0x05	; 5
 4e8:	9a 95       	dec	r25
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <LCD_Char+0x30>
 4ec:	00 00       	nop
 4ee:	9b b3       	in	r25, 0x1b	; 27
 4f0:	9b 7f       	andi	r25, 0xFB	; 251
 4f2:	9b bb       	out	0x1b, r25	; 27
 4f4:	ef e8       	ldi	r30, 0x8F	; 143
 4f6:	f1 e0       	ldi	r31, 0x01	; 1
 4f8:	31 97       	sbiw	r30, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <LCD_Char+0x40>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <LCD_Char+0x46>
 4fe:	00 00       	nop
 500:	98 b3       	in	r25, 0x18	; 24
 502:	98 7e       	andi	r25, 0xE8	; 232
 504:	98 bb       	out	0x18, r25	; 24
 506:	48 b3       	in	r20, 0x18	; 24
 508:	98 2f       	mov	r25, r24
 50a:	98 70       	andi	r25, 0x08	; 8
 50c:	29 2f       	mov	r18, r25
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	22 0f       	add	r18, r18
 512:	33 1f       	adc	r19, r19
 514:	87 70       	andi	r24, 0x07	; 7
 516:	28 2b       	or	r18, r24
 518:	24 2b       	or	r18, r20
 51a:	28 bb       	out	0x18, r18	; 24
 51c:	8b b3       	in	r24, 0x1b	; 27
 51e:	84 60       	ori	r24, 0x04	; 4
 520:	8b bb       	out	0x1b, r24	; 27
 522:	f5 e0       	ldi	r31, 0x05	; 5
 524:	fa 95       	dec	r31
 526:	f1 f7       	brne	.-4      	; 0x524 <LCD_Char+0x6c>
 528:	00 00       	nop
 52a:	8b b3       	in	r24, 0x1b	; 27
 52c:	8b 7f       	andi	r24, 0xFB	; 251
 52e:	8b bb       	out	0x1b, r24	; 27
 530:	8f e8       	ldi	r24, 0x8F	; 143
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <LCD_Char+0x7c>
 538:	00 c0       	rjmp	.+0      	; 0x53a <LCD_Char+0x82>
 53a:	00 00       	nop
 53c:	08 95       	ret

0000053e <LCD_String>:
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	8c 01       	movw	r16, r24
 548:	c0 e0       	ldi	r28, 0x00	; 0
 54a:	d0 e0       	ldi	r29, 0x00	; 0
 54c:	03 c0       	rjmp	.+6      	; 0x554 <LCD_String+0x16>
 54e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_Char>
 552:	21 96       	adiw	r28, 0x01	; 1
 554:	f8 01       	movw	r30, r16
 556:	ec 0f       	add	r30, r28
 558:	fd 1f       	adc	r31, r29
 55a:	80 81       	ld	r24, Z
 55c:	81 11       	cpse	r24, r1
 55e:	f7 cf       	rjmp	.-18     	; 0x54e <LCD_String+0x10>
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	08 95       	ret

0000056a <LCD_Clear>:
}
void LCD_Clear(void)
{
	LCD_Command(0x01);
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_Command>
 570:	08 95       	ret

00000572 <main>:
#include "ATmega32_Rrgiosters.h"
#include "Timer0.h"
#include "Functions.h"

int main(void)
{
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
 57a:	66 97       	sbiw	r28, 0x16	; 22
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	f8 94       	cli
 580:	de bf       	out	0x3e, r29	; 62
 582:	0f be       	out	0x3f, r0	; 63
 584:	cd bf       	out	0x3d, r28	; 61
seven_segment_Init();
 586:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <seven_segment_Init>
LCD_Init();
 58a:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_Init>
keypad_Init();
 58e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <keypad_Init>
Timer0_init();
 592:	0e 94 82 03 	call	0x704	; 0x704 <Timer0_init>

int Number[10]={0}; //number user input
 596:	fe 01       	movw	r30, r28
 598:	31 96       	adiw	r30, 0x01	; 1
 59a:	84 e1       	ldi	r24, 0x14	; 20
 59c:	df 01       	movw	r26, r30
 59e:	1d 92       	st	X+, r1
 5a0:	8a 95       	dec	r24
 5a2:	e9 f7       	brne	.-6      	; 0x59e <main+0x2c>
int num; //num: index for Number store input

while(1)
{	
	Userinput(Number,&num);
 5a4:	be 01       	movw	r22, r28
 5a6:	6b 5e       	subi	r22, 0xEB	; 235
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	ce 01       	movw	r24, r28
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	0e 94 49 00 	call	0x92	; 0x92 <Userinput>
	//sort numbers and Display on LCD
	Display_sort_Number(Number,num);
 5b2:	6d 89       	ldd	r22, Y+21	; 0x15
 5b4:	7e 89       	ldd	r23, Y+22	; 0x16
 5b6:	ce 01       	movw	r24, r28
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Display_sort_Number>
 5be:	f2 cf       	rjmp	.-28     	; 0x5a4 <main+0x32>

000005c0 <seven_segment_Init>:
 */ 
#include "seven_segment.h"

void seven_segment_Init(void)
{
	SET_BIT(DDRB,COM1); /*Enable first seven segment*/
 5c0:	87 b3       	in	r24, 0x17	; 23
 5c2:	80 64       	ori	r24, 0x40	; 64
 5c4:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,COM2);/*Enable second seven segment*/
 5c6:	87 b3       	in	r24, 0x17	; 23
 5c8:	80 62       	ori	r24, 0x20	; 32
 5ca:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRA,COM3); /*Enable third seven segment*/
 5cc:	8a b3       	in	r24, 0x1a	; 26
 5ce:	84 60       	ori	r24, 0x04	; 4
 5d0:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,COM4); /*Enable fourth seven segment*/
 5d2:	8a b3       	in	r24, 0x1a	; 26
 5d4:	88 60       	ori	r24, 0x08	; 8
 5d6:	8a bb       	out	0x1a, r24	; 26
	
	seven_segment_Data_Dir|=0b00010111;     	/*set PB0 ,PB1,PB2,PB4*/
 5d8:	87 b3       	in	r24, 0x17	; 23
 5da:	87 61       	ori	r24, 0x17	; 23
 5dc:	87 bb       	out	0x17, r24	; 23
 5de:	08 95       	ret

000005e0 <seven_segment_Display>:
}
void seven_segment_Display(unsigned char number)
{	
	seven_segment_Data_port&=0b11101000; /*Clear the 4-bits*/	                                                                                                                              
 5e0:	98 b3       	in	r25, 0x18	; 24
 5e2:	98 7e       	andi	r25, 0xE8	; 232
 5e4:	98 bb       	out	0x18, r25	; 24
	seven_segment_Data_port|= (((number&0b00001000)<<1)| (number&0b00000111)); /*Display the number*/
 5e6:	48 b3       	in	r20, 0x18	; 24
 5e8:	98 2f       	mov	r25, r24
 5ea:	98 70       	andi	r25, 0x08	; 8
 5ec:	29 2f       	mov	r18, r25
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	22 0f       	add	r18, r18
 5f2:	33 1f       	adc	r19, r19
 5f4:	87 70       	andi	r24, 0x07	; 7
 5f6:	28 2b       	or	r18, r24
 5f8:	24 2b       	or	r18, r20
 5fa:	28 bb       	out	0x18, r18	; 24
 5fc:	08 95       	ret

000005fe <seven_segment_number>:
}
void seven_segment_number(int number) {
 5fe:	1f 93       	push	r17
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	fc 01       	movw	r30, r24
  
	SET_BIT(PORTB,COM1);
 606:	88 b3       	in	r24, 0x18	; 24
 608:	80 64       	ori	r24, 0x40	; 64
 60a:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,COM2);
 60c:	88 b3       	in	r24, 0x18	; 24
 60e:	80 62       	ori	r24, 0x20	; 32
 610:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTA,COM3);
 612:	8b b3       	in	r24, 0x1b	; 27
 614:	84 60       	ori	r24, 0x04	; 4
 616:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTA,COM4);
 618:	8b b3       	in	r24, 0x1b	; 27
 61a:	88 60       	ori	r24, 0x08	; 8
 61c:	8b bb       	out	0x1b, r24	; 27
	
	// Split the number into individual digits
	int digit4 = number % 10;
 61e:	2a e0       	ldi	r18, 0x0A	; 10
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	cf 01       	movw	r24, r30
 624:	b9 01       	movw	r22, r18
 626:	0e 94 b7 03 	call	0x76e	; 0x76e <__divmodhi4>
 62a:	c8 2f       	mov	r28, r24
	int digit3 = (number / 10) % 10;
 62c:	cb 01       	movw	r24, r22
 62e:	b9 01       	movw	r22, r18
 630:	0e 94 b7 03 	call	0x76e	; 0x76e <__divmodhi4>
 634:	d8 2f       	mov	r29, r24
	int digit2 = (number / 100) % 10;
 636:	cf 01       	movw	r24, r30
 638:	64 e6       	ldi	r22, 0x64	; 100
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	0e 94 b7 03 	call	0x76e	; 0x76e <__divmodhi4>
 640:	cb 01       	movw	r24, r22
 642:	b9 01       	movw	r22, r18
 644:	0e 94 b7 03 	call	0x76e	; 0x76e <__divmodhi4>
 648:	18 2f       	mov	r17, r24
	int digit1 = (number / 1000) % 10;
 64a:	cf 01       	movw	r24, r30
 64c:	68 ee       	ldi	r22, 0xE8	; 232
 64e:	73 e0       	ldi	r23, 0x03	; 3
 650:	0e 94 b7 03 	call	0x76e	; 0x76e <__divmodhi4>
 654:	cb 01       	movw	r24, r22
 656:	b9 01       	movw	r22, r18
 658:	0e 94 b7 03 	call	0x76e	; 0x76e <__divmodhi4>
 65c:	2f ef       	ldi	r18, 0xFF	; 255
 65e:	33 ed       	ldi	r19, 0xD3	; 211
 660:	90 e3       	ldi	r25, 0x30	; 48
 662:	21 50       	subi	r18, 0x01	; 1
 664:	30 40       	sbci	r19, 0x00	; 0
 666:	90 40       	sbci	r25, 0x00	; 0
 668:	e1 f7       	brne	.-8      	; 0x662 <seven_segment_number+0x64>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <seven_segment_number+0x6e>
 66c:	00 00       	nop
		_delay_ms(1000);
	// Display the digits on the seven-segment display
	CLR_BIT(PORTB,COM1);
 66e:	98 b3       	in	r25, 0x18	; 24
 670:	9f 7b       	andi	r25, 0xBF	; 191
 672:	98 bb       	out	0x18, r25	; 24
	seven_segment_Display( digit1);
 674:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <seven_segment_Display>
 678:	2f ef       	ldi	r18, 0xFF	; 255
 67a:	33 ed       	ldi	r19, 0xD3	; 211
 67c:	80 e3       	ldi	r24, 0x30	; 48
 67e:	21 50       	subi	r18, 0x01	; 1
 680:	30 40       	sbci	r19, 0x00	; 0
 682:	80 40       	sbci	r24, 0x00	; 0
 684:	e1 f7       	brne	.-8      	; 0x67e <seven_segment_number+0x80>
 686:	00 c0       	rjmp	.+0      	; 0x688 <seven_segment_number+0x8a>
 688:	00 00       	nop
	_delay_ms(1000);
	SET_BIT(PORTB,COM1);
 68a:	88 b3       	in	r24, 0x18	; 24
 68c:	80 64       	ori	r24, 0x40	; 64
 68e:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(PORTB,COM2);
 690:	88 b3       	in	r24, 0x18	; 24
 692:	8f 7d       	andi	r24, 0xDF	; 223
 694:	88 bb       	out	0x18, r24	; 24
	seven_segment_Display( digit2);
 696:	81 2f       	mov	r24, r17
 698:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <seven_segment_Display>
 69c:	9f ef       	ldi	r25, 0xFF	; 255
 69e:	23 ed       	ldi	r18, 0xD3	; 211
 6a0:	30 e3       	ldi	r19, 0x30	; 48
 6a2:	91 50       	subi	r25, 0x01	; 1
 6a4:	20 40       	sbci	r18, 0x00	; 0
 6a6:	30 40       	sbci	r19, 0x00	; 0
 6a8:	e1 f7       	brne	.-8      	; 0x6a2 <seven_segment_number+0xa4>
 6aa:	00 c0       	rjmp	.+0      	; 0x6ac <seven_segment_number+0xae>
 6ac:	00 00       	nop
	_delay_ms(1000);
	SET_BIT(PORTB,COM2);
 6ae:	88 b3       	in	r24, 0x18	; 24
 6b0:	80 62       	ori	r24, 0x20	; 32
 6b2:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(PORTA,COM3);
 6b4:	8b b3       	in	r24, 0x1b	; 27
 6b6:	8b 7f       	andi	r24, 0xFB	; 251
 6b8:	8b bb       	out	0x1b, r24	; 27
	seven_segment_Display( digit3);
 6ba:	8d 2f       	mov	r24, r29
 6bc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <seven_segment_Display>
 6c0:	8f ef       	ldi	r24, 0xFF	; 255
 6c2:	93 ed       	ldi	r25, 0xD3	; 211
 6c4:	20 e3       	ldi	r18, 0x30	; 48
 6c6:	81 50       	subi	r24, 0x01	; 1
 6c8:	90 40       	sbci	r25, 0x00	; 0
 6ca:	20 40       	sbci	r18, 0x00	; 0
 6cc:	e1 f7       	brne	.-8      	; 0x6c6 <seven_segment_number+0xc8>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <seven_segment_number+0xd2>
 6d0:	00 00       	nop
	_delay_ms(1000);
	SET_BIT(PORTA,COM3);
 6d2:	8b b3       	in	r24, 0x1b	; 27
 6d4:	84 60       	ori	r24, 0x04	; 4
 6d6:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTA,COM4);
 6d8:	8b b3       	in	r24, 0x1b	; 27
 6da:	87 7f       	andi	r24, 0xF7	; 247
 6dc:	8b bb       	out	0x1b, r24	; 27
	seven_segment_Display(digit4);
 6de:	8c 2f       	mov	r24, r28
 6e0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <seven_segment_Display>
 6e4:	3f ef       	ldi	r19, 0xFF	; 255
 6e6:	83 ed       	ldi	r24, 0xD3	; 211
 6e8:	90 e3       	ldi	r25, 0x30	; 48
 6ea:	31 50       	subi	r19, 0x01	; 1
 6ec:	80 40       	sbci	r24, 0x00	; 0
 6ee:	90 40       	sbci	r25, 0x00	; 0
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <seven_segment_number+0xec>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <seven_segment_number+0xf6>
 6f4:	00 00       	nop
	_delay_ms(1000);
	SET_BIT(PORTA,COM4);
 6f6:	8b b3       	in	r24, 0x1b	; 27
 6f8:	88 60       	ori	r24, 0x08	; 8
 6fa:	8b bb       	out	0x1b, r24	; 27
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	1f 91       	pop	r17
 702:	08 95       	ret

00000704 <Timer0_init>:
	SET_BIT(SREG,I_BIT);
}
void Timer0_setcallback(void(*ptr)(uint8),uint8 value)
{
g_callbackPTR=ptr;	
g_callbackValue=value;
 704:	12 be       	out	0x32, r1	; 50
 706:	89 b7       	in	r24, 0x39	; 57
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	89 bf       	out	0x39, r24	; 57
 70c:	85 e8       	ldi	r24, 0x85	; 133
 70e:	83 bf       	out	0x33, r24	; 51
 710:	8f b7       	in	r24, 0x3f	; 63
 712:	80 68       	ori	r24, 0x80	; 128
 714:	8f bf       	out	0x3f, r24	; 63
 716:	08 95       	ret

00000718 <__vector_11>:
}
ISR(TIMER0_OVF_vect)
{
 718:	1f 92       	push	r1
 71a:	0f 92       	push	r0
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	0f 92       	push	r0
 720:	11 24       	eor	r1, r1
 722:	2f 93       	push	r18
 724:	3f 93       	push	r19
 726:	4f 93       	push	r20
 728:	5f 93       	push	r21
 72a:	6f 93       	push	r22
 72c:	7f 93       	push	r23
 72e:	8f 93       	push	r24
 730:	9f 93       	push	r25
 732:	af 93       	push	r26
 734:	bf 93       	push	r27
 736:	ef 93       	push	r30
 738:	ff 93       	push	r31
	if (g_callbackPTR!=NULL_PTR)
 73a:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <g_callbackPTR>
 73e:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <g_callbackPTR+0x1>
 742:	30 97       	sbiw	r30, 0x00	; 0
 744:	19 f0       	breq	.+6      	; 0x74c <__vector_11+0x34>
	{
		
		(*g_callbackPTR)(g_callbackValue);
 746:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 74a:	09 95       	icall
	}
 74c:	ff 91       	pop	r31
 74e:	ef 91       	pop	r30
 750:	bf 91       	pop	r27
 752:	af 91       	pop	r26
 754:	9f 91       	pop	r25
 756:	8f 91       	pop	r24
 758:	7f 91       	pop	r23
 75a:	6f 91       	pop	r22
 75c:	5f 91       	pop	r21
 75e:	4f 91       	pop	r20
 760:	3f 91       	pop	r19
 762:	2f 91       	pop	r18
 764:	0f 90       	pop	r0
 766:	0f be       	out	0x3f, r0	; 63
 768:	0f 90       	pop	r0
 76a:	1f 90       	pop	r1
 76c:	18 95       	reti

0000076e <__divmodhi4>:
 76e:	97 fb       	bst	r25, 7
 770:	07 2e       	mov	r0, r23
 772:	16 f4       	brtc	.+4      	; 0x778 <__divmodhi4+0xa>
 774:	00 94       	com	r0
 776:	07 d0       	rcall	.+14     	; 0x786 <__divmodhi4_neg1>
 778:	77 fd       	sbrc	r23, 7
 77a:	09 d0       	rcall	.+18     	; 0x78e <__divmodhi4_neg2>
 77c:	0e 94 cb 03 	call	0x796	; 0x796 <__udivmodhi4>
 780:	07 fc       	sbrc	r0, 7
 782:	05 d0       	rcall	.+10     	; 0x78e <__divmodhi4_neg2>
 784:	3e f4       	brtc	.+14     	; 0x794 <__divmodhi4_exit>

00000786 <__divmodhi4_neg1>:
 786:	90 95       	com	r25
 788:	81 95       	neg	r24
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	08 95       	ret

0000078e <__divmodhi4_neg2>:
 78e:	70 95       	com	r23
 790:	61 95       	neg	r22
 792:	7f 4f       	sbci	r23, 0xFF	; 255

00000794 <__divmodhi4_exit>:
 794:	08 95       	ret

00000796 <__udivmodhi4>:
 796:	aa 1b       	sub	r26, r26
 798:	bb 1b       	sub	r27, r27
 79a:	51 e1       	ldi	r21, 0x11	; 17
 79c:	07 c0       	rjmp	.+14     	; 0x7ac <__udivmodhi4_ep>

0000079e <__udivmodhi4_loop>:
 79e:	aa 1f       	adc	r26, r26
 7a0:	bb 1f       	adc	r27, r27
 7a2:	a6 17       	cp	r26, r22
 7a4:	b7 07       	cpc	r27, r23
 7a6:	10 f0       	brcs	.+4      	; 0x7ac <__udivmodhi4_ep>
 7a8:	a6 1b       	sub	r26, r22
 7aa:	b7 0b       	sbc	r27, r23

000007ac <__udivmodhi4_ep>:
 7ac:	88 1f       	adc	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	5a 95       	dec	r21
 7b2:	a9 f7       	brne	.-22     	; 0x79e <__udivmodhi4_loop>
 7b4:	80 95       	com	r24
 7b6:	90 95       	com	r25
 7b8:	bc 01       	movw	r22, r24
 7ba:	cd 01       	movw	r24, r26
 7bc:	08 95       	ret

000007be <sprintf>:
 7be:	ae e0       	ldi	r26, 0x0E	; 14
 7c0:	b0 e0       	ldi	r27, 0x00	; 0
 7c2:	e5 ee       	ldi	r30, 0xE5	; 229
 7c4:	f3 e0       	ldi	r31, 0x03	; 3
 7c6:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__prologue_saves__+0x1c>
 7ca:	0d 89       	ldd	r16, Y+21	; 0x15
 7cc:	1e 89       	ldd	r17, Y+22	; 0x16
 7ce:	86 e0       	ldi	r24, 0x06	; 6
 7d0:	8c 83       	std	Y+4, r24	; 0x04
 7d2:	1a 83       	std	Y+2, r17	; 0x02
 7d4:	09 83       	std	Y+1, r16	; 0x01
 7d6:	8f ef       	ldi	r24, 0xFF	; 255
 7d8:	9f e7       	ldi	r25, 0x7F	; 127
 7da:	9e 83       	std	Y+6, r25	; 0x06
 7dc:	8d 83       	std	Y+5, r24	; 0x05
 7de:	ae 01       	movw	r20, r28
 7e0:	47 5e       	subi	r20, 0xE7	; 231
 7e2:	5f 4f       	sbci	r21, 0xFF	; 255
 7e4:	6f 89       	ldd	r22, Y+23	; 0x17
 7e6:	78 8d       	ldd	r23, Y+24	; 0x18
 7e8:	ce 01       	movw	r24, r28
 7ea:	01 96       	adiw	r24, 0x01	; 1
 7ec:	0e 94 01 04 	call	0x802	; 0x802 <vfprintf>
 7f0:	ef 81       	ldd	r30, Y+7	; 0x07
 7f2:	f8 85       	ldd	r31, Y+8	; 0x08
 7f4:	e0 0f       	add	r30, r16
 7f6:	f1 1f       	adc	r31, r17
 7f8:	10 82       	st	Z, r1
 7fa:	2e 96       	adiw	r28, 0x0e	; 14
 7fc:	e4 e0       	ldi	r30, 0x04	; 4
 7fe:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__epilogue_restores__+0x1c>

00000802 <vfprintf>:
 802:	ab e0       	ldi	r26, 0x0B	; 11
 804:	b0 e0       	ldi	r27, 0x00	; 0
 806:	e7 e0       	ldi	r30, 0x07	; 7
 808:	f4 e0       	ldi	r31, 0x04	; 4
 80a:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__prologue_saves__>
 80e:	6c 01       	movw	r12, r24
 810:	7b 01       	movw	r14, r22
 812:	8a 01       	movw	r16, r20
 814:	fc 01       	movw	r30, r24
 816:	17 82       	std	Z+7, r1	; 0x07
 818:	16 82       	std	Z+6, r1	; 0x06
 81a:	83 81       	ldd	r24, Z+3	; 0x03
 81c:	81 ff       	sbrs	r24, 1
 81e:	cc c1       	rjmp	.+920    	; 0xbb8 <__stack+0x359>
 820:	ce 01       	movw	r24, r28
 822:	01 96       	adiw	r24, 0x01	; 1
 824:	3c 01       	movw	r6, r24
 826:	f6 01       	movw	r30, r12
 828:	93 81       	ldd	r25, Z+3	; 0x03
 82a:	f7 01       	movw	r30, r14
 82c:	93 fd       	sbrc	r25, 3
 82e:	85 91       	lpm	r24, Z+
 830:	93 ff       	sbrs	r25, 3
 832:	81 91       	ld	r24, Z+
 834:	7f 01       	movw	r14, r30
 836:	88 23       	and	r24, r24
 838:	09 f4       	brne	.+2      	; 0x83c <vfprintf+0x3a>
 83a:	ba c1       	rjmp	.+884    	; 0xbb0 <__stack+0x351>
 83c:	85 32       	cpi	r24, 0x25	; 37
 83e:	39 f4       	brne	.+14     	; 0x84e <vfprintf+0x4c>
 840:	93 fd       	sbrc	r25, 3
 842:	85 91       	lpm	r24, Z+
 844:	93 ff       	sbrs	r25, 3
 846:	81 91       	ld	r24, Z+
 848:	7f 01       	movw	r14, r30
 84a:	85 32       	cpi	r24, 0x25	; 37
 84c:	29 f4       	brne	.+10     	; 0x858 <vfprintf+0x56>
 84e:	b6 01       	movw	r22, r12
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <fputc>
 856:	e7 cf       	rjmp	.-50     	; 0x826 <vfprintf+0x24>
 858:	91 2c       	mov	r9, r1
 85a:	21 2c       	mov	r2, r1
 85c:	31 2c       	mov	r3, r1
 85e:	ff e1       	ldi	r31, 0x1F	; 31
 860:	f3 15       	cp	r31, r3
 862:	d8 f0       	brcs	.+54     	; 0x89a <__stack+0x3b>
 864:	8b 32       	cpi	r24, 0x2B	; 43
 866:	79 f0       	breq	.+30     	; 0x886 <__stack+0x27>
 868:	38 f4       	brcc	.+14     	; 0x878 <__stack+0x19>
 86a:	80 32       	cpi	r24, 0x20	; 32
 86c:	79 f0       	breq	.+30     	; 0x88c <__stack+0x2d>
 86e:	83 32       	cpi	r24, 0x23	; 35
 870:	a1 f4       	brne	.+40     	; 0x89a <__stack+0x3b>
 872:	23 2d       	mov	r18, r3
 874:	20 61       	ori	r18, 0x10	; 16
 876:	1d c0       	rjmp	.+58     	; 0x8b2 <__stack+0x53>
 878:	8d 32       	cpi	r24, 0x2D	; 45
 87a:	61 f0       	breq	.+24     	; 0x894 <__stack+0x35>
 87c:	80 33       	cpi	r24, 0x30	; 48
 87e:	69 f4       	brne	.+26     	; 0x89a <__stack+0x3b>
 880:	23 2d       	mov	r18, r3
 882:	21 60       	ori	r18, 0x01	; 1
 884:	16 c0       	rjmp	.+44     	; 0x8b2 <__stack+0x53>
 886:	83 2d       	mov	r24, r3
 888:	82 60       	ori	r24, 0x02	; 2
 88a:	38 2e       	mov	r3, r24
 88c:	e3 2d       	mov	r30, r3
 88e:	e4 60       	ori	r30, 0x04	; 4
 890:	3e 2e       	mov	r3, r30
 892:	2a c0       	rjmp	.+84     	; 0x8e8 <__stack+0x89>
 894:	f3 2d       	mov	r31, r3
 896:	f8 60       	ori	r31, 0x08	; 8
 898:	1d c0       	rjmp	.+58     	; 0x8d4 <__stack+0x75>
 89a:	37 fc       	sbrc	r3, 7
 89c:	2d c0       	rjmp	.+90     	; 0x8f8 <__stack+0x99>
 89e:	20 ed       	ldi	r18, 0xD0	; 208
 8a0:	28 0f       	add	r18, r24
 8a2:	2a 30       	cpi	r18, 0x0A	; 10
 8a4:	40 f0       	brcs	.+16     	; 0x8b6 <__stack+0x57>
 8a6:	8e 32       	cpi	r24, 0x2E	; 46
 8a8:	b9 f4       	brne	.+46     	; 0x8d8 <__stack+0x79>
 8aa:	36 fc       	sbrc	r3, 6
 8ac:	81 c1       	rjmp	.+770    	; 0xbb0 <__stack+0x351>
 8ae:	23 2d       	mov	r18, r3
 8b0:	20 64       	ori	r18, 0x40	; 64
 8b2:	32 2e       	mov	r3, r18
 8b4:	19 c0       	rjmp	.+50     	; 0x8e8 <__stack+0x89>
 8b6:	36 fe       	sbrs	r3, 6
 8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <__stack+0x67>
 8ba:	8a e0       	ldi	r24, 0x0A	; 10
 8bc:	98 9e       	mul	r9, r24
 8be:	20 0d       	add	r18, r0
 8c0:	11 24       	eor	r1, r1
 8c2:	92 2e       	mov	r9, r18
 8c4:	11 c0       	rjmp	.+34     	; 0x8e8 <__stack+0x89>
 8c6:	ea e0       	ldi	r30, 0x0A	; 10
 8c8:	2e 9e       	mul	r2, r30
 8ca:	20 0d       	add	r18, r0
 8cc:	11 24       	eor	r1, r1
 8ce:	22 2e       	mov	r2, r18
 8d0:	f3 2d       	mov	r31, r3
 8d2:	f0 62       	ori	r31, 0x20	; 32
 8d4:	3f 2e       	mov	r3, r31
 8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <__stack+0x89>
 8d8:	8c 36       	cpi	r24, 0x6C	; 108
 8da:	21 f4       	brne	.+8      	; 0x8e4 <__stack+0x85>
 8dc:	83 2d       	mov	r24, r3
 8de:	80 68       	ori	r24, 0x80	; 128
 8e0:	38 2e       	mov	r3, r24
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <__stack+0x89>
 8e4:	88 36       	cpi	r24, 0x68	; 104
 8e6:	41 f4       	brne	.+16     	; 0x8f8 <__stack+0x99>
 8e8:	f7 01       	movw	r30, r14
 8ea:	93 fd       	sbrc	r25, 3
 8ec:	85 91       	lpm	r24, Z+
 8ee:	93 ff       	sbrs	r25, 3
 8f0:	81 91       	ld	r24, Z+
 8f2:	7f 01       	movw	r14, r30
 8f4:	81 11       	cpse	r24, r1
 8f6:	b3 cf       	rjmp	.-154    	; 0x85e <vfprintf+0x5c>
 8f8:	98 2f       	mov	r25, r24
 8fa:	9f 7d       	andi	r25, 0xDF	; 223
 8fc:	95 54       	subi	r25, 0x45	; 69
 8fe:	93 30       	cpi	r25, 0x03	; 3
 900:	28 f4       	brcc	.+10     	; 0x90c <__stack+0xad>
 902:	0c 5f       	subi	r16, 0xFC	; 252
 904:	1f 4f       	sbci	r17, 0xFF	; 255
 906:	9f e3       	ldi	r25, 0x3F	; 63
 908:	99 83       	std	Y+1, r25	; 0x01
 90a:	0d c0       	rjmp	.+26     	; 0x926 <__stack+0xc7>
 90c:	83 36       	cpi	r24, 0x63	; 99
 90e:	31 f0       	breq	.+12     	; 0x91c <__stack+0xbd>
 910:	83 37       	cpi	r24, 0x73	; 115
 912:	71 f0       	breq	.+28     	; 0x930 <__stack+0xd1>
 914:	83 35       	cpi	r24, 0x53	; 83
 916:	09 f0       	breq	.+2      	; 0x91a <__stack+0xbb>
 918:	59 c0       	rjmp	.+178    	; 0x9cc <__stack+0x16d>
 91a:	21 c0       	rjmp	.+66     	; 0x95e <__stack+0xff>
 91c:	f8 01       	movw	r30, r16
 91e:	80 81       	ld	r24, Z
 920:	89 83       	std	Y+1, r24	; 0x01
 922:	0e 5f       	subi	r16, 0xFE	; 254
 924:	1f 4f       	sbci	r17, 0xFF	; 255
 926:	88 24       	eor	r8, r8
 928:	83 94       	inc	r8
 92a:	91 2c       	mov	r9, r1
 92c:	53 01       	movw	r10, r6
 92e:	13 c0       	rjmp	.+38     	; 0x956 <__stack+0xf7>
 930:	28 01       	movw	r4, r16
 932:	f2 e0       	ldi	r31, 0x02	; 2
 934:	4f 0e       	add	r4, r31
 936:	51 1c       	adc	r5, r1
 938:	f8 01       	movw	r30, r16
 93a:	a0 80       	ld	r10, Z
 93c:	b1 80       	ldd	r11, Z+1	; 0x01
 93e:	36 fe       	sbrs	r3, 6
 940:	03 c0       	rjmp	.+6      	; 0x948 <__stack+0xe9>
 942:	69 2d       	mov	r22, r9
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0xed>
 948:	6f ef       	ldi	r22, 0xFF	; 255
 94a:	7f ef       	ldi	r23, 0xFF	; 255
 94c:	c5 01       	movw	r24, r10
 94e:	0e 94 ed 05 	call	0xbda	; 0xbda <strnlen>
 952:	4c 01       	movw	r8, r24
 954:	82 01       	movw	r16, r4
 956:	f3 2d       	mov	r31, r3
 958:	ff 77       	andi	r31, 0x7F	; 127
 95a:	3f 2e       	mov	r3, r31
 95c:	16 c0       	rjmp	.+44     	; 0x98a <__stack+0x12b>
 95e:	28 01       	movw	r4, r16
 960:	22 e0       	ldi	r18, 0x02	; 2
 962:	42 0e       	add	r4, r18
 964:	51 1c       	adc	r5, r1
 966:	f8 01       	movw	r30, r16
 968:	a0 80       	ld	r10, Z
 96a:	b1 80       	ldd	r11, Z+1	; 0x01
 96c:	36 fe       	sbrs	r3, 6
 96e:	03 c0       	rjmp	.+6      	; 0x976 <__stack+0x117>
 970:	69 2d       	mov	r22, r9
 972:	70 e0       	ldi	r23, 0x00	; 0
 974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x11b>
 976:	6f ef       	ldi	r22, 0xFF	; 255
 978:	7f ef       	ldi	r23, 0xFF	; 255
 97a:	c5 01       	movw	r24, r10
 97c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <strnlen_P>
 980:	4c 01       	movw	r8, r24
 982:	f3 2d       	mov	r31, r3
 984:	f0 68       	ori	r31, 0x80	; 128
 986:	3f 2e       	mov	r3, r31
 988:	82 01       	movw	r16, r4
 98a:	33 fc       	sbrc	r3, 3
 98c:	1b c0       	rjmp	.+54     	; 0x9c4 <__stack+0x165>
 98e:	82 2d       	mov	r24, r2
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	88 16       	cp	r8, r24
 994:	99 06       	cpc	r9, r25
 996:	b0 f4       	brcc	.+44     	; 0x9c4 <__stack+0x165>
 998:	b6 01       	movw	r22, r12
 99a:	80 e2       	ldi	r24, 0x20	; 32
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <fputc>
 9a2:	2a 94       	dec	r2
 9a4:	f4 cf       	rjmp	.-24     	; 0x98e <__stack+0x12f>
 9a6:	f5 01       	movw	r30, r10
 9a8:	37 fc       	sbrc	r3, 7
 9aa:	85 91       	lpm	r24, Z+
 9ac:	37 fe       	sbrs	r3, 7
 9ae:	81 91       	ld	r24, Z+
 9b0:	5f 01       	movw	r10, r30
 9b2:	b6 01       	movw	r22, r12
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <fputc>
 9ba:	21 10       	cpse	r2, r1
 9bc:	2a 94       	dec	r2
 9be:	21 e0       	ldi	r18, 0x01	; 1
 9c0:	82 1a       	sub	r8, r18
 9c2:	91 08       	sbc	r9, r1
 9c4:	81 14       	cp	r8, r1
 9c6:	91 04       	cpc	r9, r1
 9c8:	71 f7       	brne	.-36     	; 0x9a6 <__stack+0x147>
 9ca:	e8 c0       	rjmp	.+464    	; 0xb9c <__stack+0x33d>
 9cc:	84 36       	cpi	r24, 0x64	; 100
 9ce:	11 f0       	breq	.+4      	; 0x9d4 <__stack+0x175>
 9d0:	89 36       	cpi	r24, 0x69	; 105
 9d2:	41 f5       	brne	.+80     	; 0xa24 <__stack+0x1c5>
 9d4:	f8 01       	movw	r30, r16
 9d6:	37 fe       	sbrs	r3, 7
 9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <__stack+0x189>
 9da:	60 81       	ld	r22, Z
 9dc:	71 81       	ldd	r23, Z+1	; 0x01
 9de:	82 81       	ldd	r24, Z+2	; 0x02
 9e0:	93 81       	ldd	r25, Z+3	; 0x03
 9e2:	0c 5f       	subi	r16, 0xFC	; 252
 9e4:	1f 4f       	sbci	r17, 0xFF	; 255
 9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <__stack+0x199>
 9e8:	60 81       	ld	r22, Z
 9ea:	71 81       	ldd	r23, Z+1	; 0x01
 9ec:	07 2e       	mov	r0, r23
 9ee:	00 0c       	add	r0, r0
 9f0:	88 0b       	sbc	r24, r24
 9f2:	99 0b       	sbc	r25, r25
 9f4:	0e 5f       	subi	r16, 0xFE	; 254
 9f6:	1f 4f       	sbci	r17, 0xFF	; 255
 9f8:	f3 2d       	mov	r31, r3
 9fa:	ff 76       	andi	r31, 0x6F	; 111
 9fc:	3f 2e       	mov	r3, r31
 9fe:	97 ff       	sbrs	r25, 7
 a00:	09 c0       	rjmp	.+18     	; 0xa14 <__stack+0x1b5>
 a02:	90 95       	com	r25
 a04:	80 95       	com	r24
 a06:	70 95       	com	r23
 a08:	61 95       	neg	r22
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255
 a0c:	8f 4f       	sbci	r24, 0xFF	; 255
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	f0 68       	ori	r31, 0x80	; 128
 a12:	3f 2e       	mov	r3, r31
 a14:	2a e0       	ldi	r18, 0x0A	; 10
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	a3 01       	movw	r20, r6
 a1a:	0e 94 34 06 	call	0xc68	; 0xc68 <__ultoa_invert>
 a1e:	88 2e       	mov	r8, r24
 a20:	86 18       	sub	r8, r6
 a22:	45 c0       	rjmp	.+138    	; 0xaae <__stack+0x24f>
 a24:	85 37       	cpi	r24, 0x75	; 117
 a26:	31 f4       	brne	.+12     	; 0xa34 <__stack+0x1d5>
 a28:	23 2d       	mov	r18, r3
 a2a:	2f 7e       	andi	r18, 0xEF	; 239
 a2c:	b2 2e       	mov	r11, r18
 a2e:	2a e0       	ldi	r18, 0x0A	; 10
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	25 c0       	rjmp	.+74     	; 0xa7e <__stack+0x21f>
 a34:	93 2d       	mov	r25, r3
 a36:	99 7f       	andi	r25, 0xF9	; 249
 a38:	b9 2e       	mov	r11, r25
 a3a:	8f 36       	cpi	r24, 0x6F	; 111
 a3c:	c1 f0       	breq	.+48     	; 0xa6e <__stack+0x20f>
 a3e:	18 f4       	brcc	.+6      	; 0xa46 <__stack+0x1e7>
 a40:	88 35       	cpi	r24, 0x58	; 88
 a42:	79 f0       	breq	.+30     	; 0xa62 <__stack+0x203>
 a44:	b5 c0       	rjmp	.+362    	; 0xbb0 <__stack+0x351>
 a46:	80 37       	cpi	r24, 0x70	; 112
 a48:	19 f0       	breq	.+6      	; 0xa50 <__stack+0x1f1>
 a4a:	88 37       	cpi	r24, 0x78	; 120
 a4c:	21 f0       	breq	.+8      	; 0xa56 <__stack+0x1f7>
 a4e:	b0 c0       	rjmp	.+352    	; 0xbb0 <__stack+0x351>
 a50:	e9 2f       	mov	r30, r25
 a52:	e0 61       	ori	r30, 0x10	; 16
 a54:	be 2e       	mov	r11, r30
 a56:	b4 fe       	sbrs	r11, 4
 a58:	0d c0       	rjmp	.+26     	; 0xa74 <__stack+0x215>
 a5a:	fb 2d       	mov	r31, r11
 a5c:	f4 60       	ori	r31, 0x04	; 4
 a5e:	bf 2e       	mov	r11, r31
 a60:	09 c0       	rjmp	.+18     	; 0xa74 <__stack+0x215>
 a62:	34 fe       	sbrs	r3, 4
 a64:	0a c0       	rjmp	.+20     	; 0xa7a <__stack+0x21b>
 a66:	29 2f       	mov	r18, r25
 a68:	26 60       	ori	r18, 0x06	; 6
 a6a:	b2 2e       	mov	r11, r18
 a6c:	06 c0       	rjmp	.+12     	; 0xa7a <__stack+0x21b>
 a6e:	28 e0       	ldi	r18, 0x08	; 8
 a70:	30 e0       	ldi	r19, 0x00	; 0
 a72:	05 c0       	rjmp	.+10     	; 0xa7e <__stack+0x21f>
 a74:	20 e1       	ldi	r18, 0x10	; 16
 a76:	30 e0       	ldi	r19, 0x00	; 0
 a78:	02 c0       	rjmp	.+4      	; 0xa7e <__stack+0x21f>
 a7a:	20 e1       	ldi	r18, 0x10	; 16
 a7c:	32 e0       	ldi	r19, 0x02	; 2
 a7e:	f8 01       	movw	r30, r16
 a80:	b7 fe       	sbrs	r11, 7
 a82:	07 c0       	rjmp	.+14     	; 0xa92 <__stack+0x233>
 a84:	60 81       	ld	r22, Z
 a86:	71 81       	ldd	r23, Z+1	; 0x01
 a88:	82 81       	ldd	r24, Z+2	; 0x02
 a8a:	93 81       	ldd	r25, Z+3	; 0x03
 a8c:	0c 5f       	subi	r16, 0xFC	; 252
 a8e:	1f 4f       	sbci	r17, 0xFF	; 255
 a90:	06 c0       	rjmp	.+12     	; 0xa9e <__stack+0x23f>
 a92:	60 81       	ld	r22, Z
 a94:	71 81       	ldd	r23, Z+1	; 0x01
 a96:	80 e0       	ldi	r24, 0x00	; 0
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	0e 5f       	subi	r16, 0xFE	; 254
 a9c:	1f 4f       	sbci	r17, 0xFF	; 255
 a9e:	a3 01       	movw	r20, r6
 aa0:	0e 94 34 06 	call	0xc68	; 0xc68 <__ultoa_invert>
 aa4:	88 2e       	mov	r8, r24
 aa6:	86 18       	sub	r8, r6
 aa8:	fb 2d       	mov	r31, r11
 aaa:	ff 77       	andi	r31, 0x7F	; 127
 aac:	3f 2e       	mov	r3, r31
 aae:	36 fe       	sbrs	r3, 6
 ab0:	0d c0       	rjmp	.+26     	; 0xacc <__stack+0x26d>
 ab2:	23 2d       	mov	r18, r3
 ab4:	2e 7f       	andi	r18, 0xFE	; 254
 ab6:	a2 2e       	mov	r10, r18
 ab8:	89 14       	cp	r8, r9
 aba:	58 f4       	brcc	.+22     	; 0xad2 <__stack+0x273>
 abc:	34 fe       	sbrs	r3, 4
 abe:	0b c0       	rjmp	.+22     	; 0xad6 <__stack+0x277>
 ac0:	32 fc       	sbrc	r3, 2
 ac2:	09 c0       	rjmp	.+18     	; 0xad6 <__stack+0x277>
 ac4:	83 2d       	mov	r24, r3
 ac6:	8e 7e       	andi	r24, 0xEE	; 238
 ac8:	a8 2e       	mov	r10, r24
 aca:	05 c0       	rjmp	.+10     	; 0xad6 <__stack+0x277>
 acc:	b8 2c       	mov	r11, r8
 ace:	a3 2c       	mov	r10, r3
 ad0:	03 c0       	rjmp	.+6      	; 0xad8 <__stack+0x279>
 ad2:	b8 2c       	mov	r11, r8
 ad4:	01 c0       	rjmp	.+2      	; 0xad8 <__stack+0x279>
 ad6:	b9 2c       	mov	r11, r9
 ad8:	a4 fe       	sbrs	r10, 4
 ada:	0f c0       	rjmp	.+30     	; 0xafa <__stack+0x29b>
 adc:	fe 01       	movw	r30, r28
 ade:	e8 0d       	add	r30, r8
 ae0:	f1 1d       	adc	r31, r1
 ae2:	80 81       	ld	r24, Z
 ae4:	80 33       	cpi	r24, 0x30	; 48
 ae6:	21 f4       	brne	.+8      	; 0xaf0 <__stack+0x291>
 ae8:	9a 2d       	mov	r25, r10
 aea:	99 7e       	andi	r25, 0xE9	; 233
 aec:	a9 2e       	mov	r10, r25
 aee:	09 c0       	rjmp	.+18     	; 0xb02 <__stack+0x2a3>
 af0:	a2 fe       	sbrs	r10, 2
 af2:	06 c0       	rjmp	.+12     	; 0xb00 <__stack+0x2a1>
 af4:	b3 94       	inc	r11
 af6:	b3 94       	inc	r11
 af8:	04 c0       	rjmp	.+8      	; 0xb02 <__stack+0x2a3>
 afa:	8a 2d       	mov	r24, r10
 afc:	86 78       	andi	r24, 0x86	; 134
 afe:	09 f0       	breq	.+2      	; 0xb02 <__stack+0x2a3>
 b00:	b3 94       	inc	r11
 b02:	a3 fc       	sbrc	r10, 3
 b04:	11 c0       	rjmp	.+34     	; 0xb28 <__stack+0x2c9>
 b06:	a0 fe       	sbrs	r10, 0
 b08:	06 c0       	rjmp	.+12     	; 0xb16 <__stack+0x2b7>
 b0a:	b2 14       	cp	r11, r2
 b0c:	88 f4       	brcc	.+34     	; 0xb30 <__stack+0x2d1>
 b0e:	28 0c       	add	r2, r8
 b10:	92 2c       	mov	r9, r2
 b12:	9b 18       	sub	r9, r11
 b14:	0e c0       	rjmp	.+28     	; 0xb32 <__stack+0x2d3>
 b16:	b2 14       	cp	r11, r2
 b18:	60 f4       	brcc	.+24     	; 0xb32 <__stack+0x2d3>
 b1a:	b6 01       	movw	r22, r12
 b1c:	80 e2       	ldi	r24, 0x20	; 32
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <fputc>
 b24:	b3 94       	inc	r11
 b26:	f7 cf       	rjmp	.-18     	; 0xb16 <__stack+0x2b7>
 b28:	b2 14       	cp	r11, r2
 b2a:	18 f4       	brcc	.+6      	; 0xb32 <__stack+0x2d3>
 b2c:	2b 18       	sub	r2, r11
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <__stack+0x2d5>
 b30:	98 2c       	mov	r9, r8
 b32:	21 2c       	mov	r2, r1
 b34:	a4 fe       	sbrs	r10, 4
 b36:	10 c0       	rjmp	.+32     	; 0xb58 <__stack+0x2f9>
 b38:	b6 01       	movw	r22, r12
 b3a:	80 e3       	ldi	r24, 0x30	; 48
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <fputc>
 b42:	a2 fe       	sbrs	r10, 2
 b44:	17 c0       	rjmp	.+46     	; 0xb74 <__stack+0x315>
 b46:	a1 fc       	sbrc	r10, 1
 b48:	03 c0       	rjmp	.+6      	; 0xb50 <__stack+0x2f1>
 b4a:	88 e7       	ldi	r24, 0x78	; 120
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	02 c0       	rjmp	.+4      	; 0xb54 <__stack+0x2f5>
 b50:	88 e5       	ldi	r24, 0x58	; 88
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	b6 01       	movw	r22, r12
 b56:	0c c0       	rjmp	.+24     	; 0xb70 <__stack+0x311>
 b58:	8a 2d       	mov	r24, r10
 b5a:	86 78       	andi	r24, 0x86	; 134
 b5c:	59 f0       	breq	.+22     	; 0xb74 <__stack+0x315>
 b5e:	a1 fe       	sbrs	r10, 1
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <__stack+0x307>
 b62:	8b e2       	ldi	r24, 0x2B	; 43
 b64:	01 c0       	rjmp	.+2      	; 0xb68 <__stack+0x309>
 b66:	80 e2       	ldi	r24, 0x20	; 32
 b68:	a7 fc       	sbrc	r10, 7
 b6a:	8d e2       	ldi	r24, 0x2D	; 45
 b6c:	b6 01       	movw	r22, r12
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <fputc>
 b74:	89 14       	cp	r8, r9
 b76:	38 f4       	brcc	.+14     	; 0xb86 <__stack+0x327>
 b78:	b6 01       	movw	r22, r12
 b7a:	80 e3       	ldi	r24, 0x30	; 48
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <fputc>
 b82:	9a 94       	dec	r9
 b84:	f7 cf       	rjmp	.-18     	; 0xb74 <__stack+0x315>
 b86:	8a 94       	dec	r8
 b88:	f3 01       	movw	r30, r6
 b8a:	e8 0d       	add	r30, r8
 b8c:	f1 1d       	adc	r31, r1
 b8e:	80 81       	ld	r24, Z
 b90:	b6 01       	movw	r22, r12
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <fputc>
 b98:	81 10       	cpse	r8, r1
 b9a:	f5 cf       	rjmp	.-22     	; 0xb86 <__stack+0x327>
 b9c:	22 20       	and	r2, r2
 b9e:	09 f4       	brne	.+2      	; 0xba2 <__stack+0x343>
 ba0:	42 ce       	rjmp	.-892    	; 0x826 <vfprintf+0x24>
 ba2:	b6 01       	movw	r22, r12
 ba4:	80 e2       	ldi	r24, 0x20	; 32
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <fputc>
 bac:	2a 94       	dec	r2
 bae:	f6 cf       	rjmp	.-20     	; 0xb9c <__stack+0x33d>
 bb0:	f6 01       	movw	r30, r12
 bb2:	86 81       	ldd	r24, Z+6	; 0x06
 bb4:	97 81       	ldd	r25, Z+7	; 0x07
 bb6:	02 c0       	rjmp	.+4      	; 0xbbc <__stack+0x35d>
 bb8:	8f ef       	ldi	r24, 0xFF	; 255
 bba:	9f ef       	ldi	r25, 0xFF	; 255
 bbc:	2b 96       	adiw	r28, 0x0b	; 11
 bbe:	e2 e1       	ldi	r30, 0x12	; 18
 bc0:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__epilogue_restores__>

00000bc4 <strnlen_P>:
 bc4:	fc 01       	movw	r30, r24
 bc6:	05 90       	lpm	r0, Z+
 bc8:	61 50       	subi	r22, 0x01	; 1
 bca:	70 40       	sbci	r23, 0x00	; 0
 bcc:	01 10       	cpse	r0, r1
 bce:	d8 f7       	brcc	.-10     	; 0xbc6 <strnlen_P+0x2>
 bd0:	80 95       	com	r24
 bd2:	90 95       	com	r25
 bd4:	8e 0f       	add	r24, r30
 bd6:	9f 1f       	adc	r25, r31
 bd8:	08 95       	ret

00000bda <strnlen>:
 bda:	fc 01       	movw	r30, r24
 bdc:	61 50       	subi	r22, 0x01	; 1
 bde:	70 40       	sbci	r23, 0x00	; 0
 be0:	01 90       	ld	r0, Z+
 be2:	01 10       	cpse	r0, r1
 be4:	d8 f7       	brcc	.-10     	; 0xbdc <strnlen+0x2>
 be6:	80 95       	com	r24
 be8:	90 95       	com	r25
 bea:	8e 0f       	add	r24, r30
 bec:	9f 1f       	adc	r25, r31
 bee:	08 95       	ret

00000bf0 <fputc>:
 bf0:	0f 93       	push	r16
 bf2:	1f 93       	push	r17
 bf4:	cf 93       	push	r28
 bf6:	df 93       	push	r29
 bf8:	fb 01       	movw	r30, r22
 bfa:	23 81       	ldd	r18, Z+3	; 0x03
 bfc:	21 fd       	sbrc	r18, 1
 bfe:	03 c0       	rjmp	.+6      	; 0xc06 <fputc+0x16>
 c00:	8f ef       	ldi	r24, 0xFF	; 255
 c02:	9f ef       	ldi	r25, 0xFF	; 255
 c04:	2c c0       	rjmp	.+88     	; 0xc5e <fputc+0x6e>
 c06:	22 ff       	sbrs	r18, 2
 c08:	16 c0       	rjmp	.+44     	; 0xc36 <fputc+0x46>
 c0a:	46 81       	ldd	r20, Z+6	; 0x06
 c0c:	57 81       	ldd	r21, Z+7	; 0x07
 c0e:	24 81       	ldd	r18, Z+4	; 0x04
 c10:	35 81       	ldd	r19, Z+5	; 0x05
 c12:	42 17       	cp	r20, r18
 c14:	53 07       	cpc	r21, r19
 c16:	44 f4       	brge	.+16     	; 0xc28 <fputc+0x38>
 c18:	a0 81       	ld	r26, Z
 c1a:	b1 81       	ldd	r27, Z+1	; 0x01
 c1c:	9d 01       	movw	r18, r26
 c1e:	2f 5f       	subi	r18, 0xFF	; 255
 c20:	3f 4f       	sbci	r19, 0xFF	; 255
 c22:	31 83       	std	Z+1, r19	; 0x01
 c24:	20 83       	st	Z, r18
 c26:	8c 93       	st	X, r24
 c28:	26 81       	ldd	r18, Z+6	; 0x06
 c2a:	37 81       	ldd	r19, Z+7	; 0x07
 c2c:	2f 5f       	subi	r18, 0xFF	; 255
 c2e:	3f 4f       	sbci	r19, 0xFF	; 255
 c30:	37 83       	std	Z+7, r19	; 0x07
 c32:	26 83       	std	Z+6, r18	; 0x06
 c34:	14 c0       	rjmp	.+40     	; 0xc5e <fputc+0x6e>
 c36:	8b 01       	movw	r16, r22
 c38:	ec 01       	movw	r28, r24
 c3a:	fb 01       	movw	r30, r22
 c3c:	00 84       	ldd	r0, Z+8	; 0x08
 c3e:	f1 85       	ldd	r31, Z+9	; 0x09
 c40:	e0 2d       	mov	r30, r0
 c42:	09 95       	icall
 c44:	89 2b       	or	r24, r25
 c46:	e1 f6       	brne	.-72     	; 0xc00 <fputc+0x10>
 c48:	d8 01       	movw	r26, r16
 c4a:	16 96       	adiw	r26, 0x06	; 6
 c4c:	8d 91       	ld	r24, X+
 c4e:	9c 91       	ld	r25, X
 c50:	17 97       	sbiw	r26, 0x07	; 7
 c52:	01 96       	adiw	r24, 0x01	; 1
 c54:	17 96       	adiw	r26, 0x07	; 7
 c56:	9c 93       	st	X, r25
 c58:	8e 93       	st	-X, r24
 c5a:	16 97       	sbiw	r26, 0x06	; 6
 c5c:	ce 01       	movw	r24, r28
 c5e:	df 91       	pop	r29
 c60:	cf 91       	pop	r28
 c62:	1f 91       	pop	r17
 c64:	0f 91       	pop	r16
 c66:	08 95       	ret

00000c68 <__ultoa_invert>:
 c68:	fa 01       	movw	r30, r20
 c6a:	aa 27       	eor	r26, r26
 c6c:	28 30       	cpi	r18, 0x08	; 8
 c6e:	51 f1       	breq	.+84     	; 0xcc4 <__ultoa_invert+0x5c>
 c70:	20 31       	cpi	r18, 0x10	; 16
 c72:	81 f1       	breq	.+96     	; 0xcd4 <__ultoa_invert+0x6c>
 c74:	e8 94       	clt
 c76:	6f 93       	push	r22
 c78:	6e 7f       	andi	r22, 0xFE	; 254
 c7a:	6e 5f       	subi	r22, 0xFE	; 254
 c7c:	7f 4f       	sbci	r23, 0xFF	; 255
 c7e:	8f 4f       	sbci	r24, 0xFF	; 255
 c80:	9f 4f       	sbci	r25, 0xFF	; 255
 c82:	af 4f       	sbci	r26, 0xFF	; 255
 c84:	b1 e0       	ldi	r27, 0x01	; 1
 c86:	3e d0       	rcall	.+124    	; 0xd04 <__ultoa_invert+0x9c>
 c88:	b4 e0       	ldi	r27, 0x04	; 4
 c8a:	3c d0       	rcall	.+120    	; 0xd04 <__ultoa_invert+0x9c>
 c8c:	67 0f       	add	r22, r23
 c8e:	78 1f       	adc	r23, r24
 c90:	89 1f       	adc	r24, r25
 c92:	9a 1f       	adc	r25, r26
 c94:	a1 1d       	adc	r26, r1
 c96:	68 0f       	add	r22, r24
 c98:	79 1f       	adc	r23, r25
 c9a:	8a 1f       	adc	r24, r26
 c9c:	91 1d       	adc	r25, r1
 c9e:	a1 1d       	adc	r26, r1
 ca0:	6a 0f       	add	r22, r26
 ca2:	71 1d       	adc	r23, r1
 ca4:	81 1d       	adc	r24, r1
 ca6:	91 1d       	adc	r25, r1
 ca8:	a1 1d       	adc	r26, r1
 caa:	20 d0       	rcall	.+64     	; 0xcec <__ultoa_invert+0x84>
 cac:	09 f4       	brne	.+2      	; 0xcb0 <__ultoa_invert+0x48>
 cae:	68 94       	set
 cb0:	3f 91       	pop	r19
 cb2:	2a e0       	ldi	r18, 0x0A	; 10
 cb4:	26 9f       	mul	r18, r22
 cb6:	11 24       	eor	r1, r1
 cb8:	30 19       	sub	r19, r0
 cba:	30 5d       	subi	r19, 0xD0	; 208
 cbc:	31 93       	st	Z+, r19
 cbe:	de f6       	brtc	.-74     	; 0xc76 <__ultoa_invert+0xe>
 cc0:	cf 01       	movw	r24, r30
 cc2:	08 95       	ret
 cc4:	46 2f       	mov	r20, r22
 cc6:	47 70       	andi	r20, 0x07	; 7
 cc8:	40 5d       	subi	r20, 0xD0	; 208
 cca:	41 93       	st	Z+, r20
 ccc:	b3 e0       	ldi	r27, 0x03	; 3
 cce:	0f d0       	rcall	.+30     	; 0xcee <__ultoa_invert+0x86>
 cd0:	c9 f7       	brne	.-14     	; 0xcc4 <__ultoa_invert+0x5c>
 cd2:	f6 cf       	rjmp	.-20     	; 0xcc0 <__ultoa_invert+0x58>
 cd4:	46 2f       	mov	r20, r22
 cd6:	4f 70       	andi	r20, 0x0F	; 15
 cd8:	40 5d       	subi	r20, 0xD0	; 208
 cda:	4a 33       	cpi	r20, 0x3A	; 58
 cdc:	18 f0       	brcs	.+6      	; 0xce4 <__ultoa_invert+0x7c>
 cde:	49 5d       	subi	r20, 0xD9	; 217
 ce0:	31 fd       	sbrc	r19, 1
 ce2:	40 52       	subi	r20, 0x20	; 32
 ce4:	41 93       	st	Z+, r20
 ce6:	02 d0       	rcall	.+4      	; 0xcec <__ultoa_invert+0x84>
 ce8:	a9 f7       	brne	.-22     	; 0xcd4 <__ultoa_invert+0x6c>
 cea:	ea cf       	rjmp	.-44     	; 0xcc0 <__ultoa_invert+0x58>
 cec:	b4 e0       	ldi	r27, 0x04	; 4
 cee:	a6 95       	lsr	r26
 cf0:	97 95       	ror	r25
 cf2:	87 95       	ror	r24
 cf4:	77 95       	ror	r23
 cf6:	67 95       	ror	r22
 cf8:	ba 95       	dec	r27
 cfa:	c9 f7       	brne	.-14     	; 0xcee <__ultoa_invert+0x86>
 cfc:	00 97       	sbiw	r24, 0x00	; 0
 cfe:	61 05       	cpc	r22, r1
 d00:	71 05       	cpc	r23, r1
 d02:	08 95       	ret
 d04:	9b 01       	movw	r18, r22
 d06:	ac 01       	movw	r20, r24
 d08:	0a 2e       	mov	r0, r26
 d0a:	06 94       	lsr	r0
 d0c:	57 95       	ror	r21
 d0e:	47 95       	ror	r20
 d10:	37 95       	ror	r19
 d12:	27 95       	ror	r18
 d14:	ba 95       	dec	r27
 d16:	c9 f7       	brne	.-14     	; 0xd0a <__ultoa_invert+0xa2>
 d18:	62 0f       	add	r22, r18
 d1a:	73 1f       	adc	r23, r19
 d1c:	84 1f       	adc	r24, r20
 d1e:	95 1f       	adc	r25, r21
 d20:	a0 1d       	adc	r26, r0
 d22:	08 95       	ret

00000d24 <__prologue_saves__>:
 d24:	2f 92       	push	r2
 d26:	3f 92       	push	r3
 d28:	4f 92       	push	r4
 d2a:	5f 92       	push	r5
 d2c:	6f 92       	push	r6
 d2e:	7f 92       	push	r7
 d30:	8f 92       	push	r8
 d32:	9f 92       	push	r9
 d34:	af 92       	push	r10
 d36:	bf 92       	push	r11
 d38:	cf 92       	push	r12
 d3a:	df 92       	push	r13
 d3c:	ef 92       	push	r14
 d3e:	ff 92       	push	r15
 d40:	0f 93       	push	r16
 d42:	1f 93       	push	r17
 d44:	cf 93       	push	r28
 d46:	df 93       	push	r29
 d48:	cd b7       	in	r28, 0x3d	; 61
 d4a:	de b7       	in	r29, 0x3e	; 62
 d4c:	ca 1b       	sub	r28, r26
 d4e:	db 0b       	sbc	r29, r27
 d50:	0f b6       	in	r0, 0x3f	; 63
 d52:	f8 94       	cli
 d54:	de bf       	out	0x3e, r29	; 62
 d56:	0f be       	out	0x3f, r0	; 63
 d58:	cd bf       	out	0x3d, r28	; 61
 d5a:	09 94       	ijmp

00000d5c <__epilogue_restores__>:
 d5c:	2a 88       	ldd	r2, Y+18	; 0x12
 d5e:	39 88       	ldd	r3, Y+17	; 0x11
 d60:	48 88       	ldd	r4, Y+16	; 0x10
 d62:	5f 84       	ldd	r5, Y+15	; 0x0f
 d64:	6e 84       	ldd	r6, Y+14	; 0x0e
 d66:	7d 84       	ldd	r7, Y+13	; 0x0d
 d68:	8c 84       	ldd	r8, Y+12	; 0x0c
 d6a:	9b 84       	ldd	r9, Y+11	; 0x0b
 d6c:	aa 84       	ldd	r10, Y+10	; 0x0a
 d6e:	b9 84       	ldd	r11, Y+9	; 0x09
 d70:	c8 84       	ldd	r12, Y+8	; 0x08
 d72:	df 80       	ldd	r13, Y+7	; 0x07
 d74:	ee 80       	ldd	r14, Y+6	; 0x06
 d76:	fd 80       	ldd	r15, Y+5	; 0x05
 d78:	0c 81       	ldd	r16, Y+4	; 0x04
 d7a:	1b 81       	ldd	r17, Y+3	; 0x03
 d7c:	aa 81       	ldd	r26, Y+2	; 0x02
 d7e:	b9 81       	ldd	r27, Y+1	; 0x01
 d80:	ce 0f       	add	r28, r30
 d82:	d1 1d       	adc	r29, r1
 d84:	0f b6       	in	r0, 0x3f	; 63
 d86:	f8 94       	cli
 d88:	de bf       	out	0x3e, r29	; 62
 d8a:	0f be       	out	0x3f, r0	; 63
 d8c:	cd bf       	out	0x3d, r28	; 61
 d8e:	ed 01       	movw	r28, r26
 d90:	08 95       	ret

00000d92 <_exit>:
 d92:	f8 94       	cli

00000d94 <__stop_program>:
 d94:	ff cf       	rjmp	.-2      	; 0xd94 <__stop_program>
