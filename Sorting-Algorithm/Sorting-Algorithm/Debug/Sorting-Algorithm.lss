
Sorting-Algorithm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000d1e  00000db2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800074  00800074  00000dc6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000133c  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac4  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd3  00000000  00000000  00002d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  0000392c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050c  00000000  00000000  00003b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bf2  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004c1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cd 01 	call	0x39a	; 0x39a <main>
  8a:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_Init>:
							/*row 3 [7-8-9-/*/ /*row 2 [4-5-6-* *//*row 1 [1-2-3- '-' *//*row 0 [ON-0- = - +*/
	
void keypad_Init()
{
	/*set pins cols as input*/
	CLR_BIT(DDRD,PIN7);
  92:	81 b3       	in	r24, 0x11	; 17
  94:	8f 77       	andi	r24, 0x7F	; 127
  96:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,PIN6);
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	8f 7b       	andi	r24, 0xBF	; 191
  9c:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,PIN5);
  9e:	81 b3       	in	r24, 0x11	; 17
  a0:	8f 7d       	andi	r24, 0xDF	; 223
  a2:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,PIN3);
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	81 bb       	out	0x11, r24	; 17
	/*set pins of rows as output*/
	SET_BIT(DDRC,PIN5);
  aa:	84 b3       	in	r24, 0x14	; 20
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,PIN4);
  b0:	84 b3       	in	r24, 0x14	; 20
  b2:	80 61       	ori	r24, 0x10	; 16
  b4:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,PIN3);
  b6:	84 b3       	in	r24, 0x14	; 20
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,PIN2);
  bc:	84 b3       	in	r24, 0x14	; 20
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	84 bb       	out	0x14, r24	; 20
	/* set col pull up*/
	SET_BIT(PORTD,PIN7);
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,PIN6);
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,PIN5);
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,PIN3);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	82 bb       	out	0x12, r24	; 18
  da:	08 95       	ret

000000dc <keypad_get_value>:
	
}
unsigned char keypad_get_value(void)
{
	unsigned char col, row, ans = INVALID_KEYPAD_PRESS;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
	for (row = 5 ; row>=2 ; row--)
  de:	e5 e0       	ldi	r30, 0x05	; 5
  e0:	62 c0       	rjmp	.+196    	; 0x1a6 <keypad_get_value+0xca>
	{
		PORTC |= 0b00111100; /*write High on all row*/
  e2:	95 b3       	in	r25, 0x15	; 21
  e4:	9c 63       	ori	r25, 0x3C	; 60
  e6:	95 bb       	out	0x15, r25	; 21
		
		CLR_BIT(PORTC,row); /*write low on one row*/
  e8:	95 b3       	in	r25, 0x15	; 21
  ea:	6e 2f       	mov	r22, r30
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	0e 2e       	mov	r0, r30
  f4:	02 c0       	rjmp	.+4      	; 0xfa <keypad_get_value+0x1e>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <keypad_get_value+0x1a>
  fe:	20 95       	com	r18
 100:	29 23       	and	r18, r25
 102:	25 bb       	out	0x15, r18	; 21
		
		for(col=7 ; col>=3 ; col--)
 104:	97 e0       	ldi	r25, 0x07	; 7
 106:	4b c0       	rjmp	.+150    	; 0x19e <keypad_get_value+0xc2>
		{
			if(col==4)
 108:	94 30       	cpi	r25, 0x04	; 4
 10a:	09 f4       	brne	.+2      	; 0x10e <keypad_get_value+0x32>
			col--;
 10c:	91 50       	subi	r25, 0x01	; 1
			
			if(GET_BIT(PIND,col)==0)
 10e:	20 b3       	in	r18, 0x10	; 16
 110:	49 2f       	mov	r20, r25
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	09 2e       	mov	r0, r25
 118:	02 c0       	rjmp	.+4      	; 0x11e <keypad_get_value+0x42>
 11a:	35 95       	asr	r19
 11c:	27 95       	ror	r18
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <keypad_get_value+0x3e>
 122:	20 fd       	sbrc	r18, 0
 124:	3b c0       	rjmp	.+118    	; 0x19c <keypad_get_value+0xc0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	3b ed       	ldi	r19, 0xDB	; 219
 12a:	f5 e0       	ldi	r31, 0x05	; 5
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	30 40       	sbci	r19, 0x00	; 0
 130:	f0 40       	sbci	r31, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <keypad_get_value+0x50>
 134:	00 c0       	rjmp	.+0      	; 0x136 <keypad_get_value+0x5a>
 136:	00 00       	nop
			{
				_delay_ms(120);
				if(GET_BIT(PIND,col)==0)
 138:	20 b3       	in	r18, 0x10	; 16
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	09 2e       	mov	r0, r25
 13e:	02 c0       	rjmp	.+4      	; 0x144 <keypad_get_value+0x68>
 140:	35 95       	asr	r19
 142:	27 95       	ror	r18
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <keypad_get_value+0x64>
 148:	20 fd       	sbrc	r18, 0
 14a:	28 c0       	rjmp	.+80     	; 0x19c <keypad_get_value+0xc0>
				{
					if(col==3)
 14c:	93 30       	cpi	r25, 0x03	; 3
 14e:	99 f4       	brne	.+38     	; 0x176 <keypad_get_value+0x9a>
					{
						ans=arr[5-row][7-col-1];
 150:	85 e0       	ldi	r24, 0x05	; 5
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	86 1b       	sub	r24, r22
 156:	97 0b       	sbc	r25, r23
 158:	26 e0       	ldi	r18, 0x06	; 6
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	24 1b       	sub	r18, r20
 15e:	35 0b       	sbc	r19, r21
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	80 5a       	subi	r24, 0xA0	; 160
 16a:	9f 4f       	sbci	r25, 0xFF	; 255
 16c:	dc 01       	movw	r26, r24
 16e:	a2 0f       	add	r26, r18
 170:	b3 1f       	adc	r27, r19
 172:	8c 91       	ld	r24, X
						break;
 174:	17 c0       	rjmp	.+46     	; 0x1a4 <keypad_get_value+0xc8>
					}
					else
					{
						ans=arr[5-row][7-col];
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	86 1b       	sub	r24, r22
 17c:	97 0b       	sbc	r25, r23
 17e:	27 e0       	ldi	r18, 0x07	; 7
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	24 1b       	sub	r18, r20
 184:	35 0b       	sbc	r19, r21
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	80 5a       	subi	r24, 0xA0	; 160
 190:	9f 4f       	sbci	r25, 0xFF	; 255
 192:	dc 01       	movw	r26, r24
 194:	a2 0f       	add	r26, r18
 196:	b3 1f       	adc	r27, r19
 198:	8c 91       	ld	r24, X
						break;
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <keypad_get_value+0xc8>
	{
		PORTC |= 0b00111100; /*write High on all row*/
		
		CLR_BIT(PORTC,row); /*write low on one row*/
		
		for(col=7 ; col>=3 ; col--)
 19c:	91 50       	subi	r25, 0x01	; 1
 19e:	93 30       	cpi	r25, 0x03	; 3
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <keypad_get_value+0xc8>
 1a2:	b2 cf       	rjmp	.-156    	; 0x108 <keypad_get_value+0x2c>
	
}
unsigned char keypad_get_value(void)
{
	unsigned char col, row, ans = INVALID_KEYPAD_PRESS;
	for (row = 5 ; row>=2 ; row--)
 1a4:	e1 50       	subi	r30, 0x01	; 1
 1a6:	e2 30       	cpi	r30, 0x02	; 2
 1a8:	08 f0       	brcs	.+2      	; 0x1ac <keypad_get_value+0xd0>
 1aa:	9b cf       	rjmp	.-202    	; 0xe2 <keypad_get_value+0x6>
				}
			}
		}
	}
	return ans;
 1ac:	08 95       	ret

000001ae <LCD_Command>:
		break;
		case 3:
		Address=col+0x54;
		break;
	}
	LCD_Command(Address|SET_CURSOR_LOCATION);
 1ae:	98 b3       	in	r25, 0x18	; 24
 1b0:	98 7e       	andi	r25, 0xE8	; 232
 1b2:	98 bb       	out	0x18, r25	; 24
 1b4:	28 2f       	mov	r18, r24
 1b6:	22 95       	swap	r18
 1b8:	2f 70       	andi	r18, 0x0F	; 15
 1ba:	38 b3       	in	r19, 0x18	; 24
 1bc:	92 2f       	mov	r25, r18
 1be:	98 70       	andi	r25, 0x08	; 8
 1c0:	49 2f       	mov	r20, r25
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	27 70       	andi	r18, 0x07	; 7
 1ca:	42 2b       	or	r20, r18
 1cc:	43 2b       	or	r20, r19
 1ce:	48 bb       	out	0x18, r20	; 24
 1d0:	9b b3       	in	r25, 0x1b	; 27
 1d2:	97 7f       	andi	r25, 0xF7	; 247
 1d4:	9b bb       	out	0x1b, r25	; 27
 1d6:	9b b3       	in	r25, 0x1b	; 27
 1d8:	94 60       	ori	r25, 0x04	; 4
 1da:	9b bb       	out	0x1b, r25	; 27
 1dc:	95 e0       	ldi	r25, 0x05	; 5
 1de:	9a 95       	dec	r25
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD_Command+0x30>
 1e2:	00 00       	nop
 1e4:	9b b3       	in	r25, 0x1b	; 27
 1e6:	9b 7f       	andi	r25, 0xFB	; 251
 1e8:	9b bb       	out	0x1b, r25	; 27
 1ea:	ef e3       	ldi	r30, 0x3F	; 63
 1ec:	ff e1       	ldi	r31, 0x1F	; 31
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_Command+0x40>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_Command+0x46>
 1f4:	00 00       	nop
 1f6:	98 b3       	in	r25, 0x18	; 24
 1f8:	98 7e       	andi	r25, 0xE8	; 232
 1fa:	98 bb       	out	0x18, r25	; 24
 1fc:	48 b3       	in	r20, 0x18	; 24
 1fe:	98 2f       	mov	r25, r24
 200:	98 70       	andi	r25, 0x08	; 8
 202:	29 2f       	mov	r18, r25
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	87 70       	andi	r24, 0x07	; 7
 20c:	28 2b       	or	r18, r24
 20e:	24 2b       	or	r18, r20
 210:	28 bb       	out	0x18, r18	; 24
 212:	8b b3       	in	r24, 0x1b	; 27
 214:	84 60       	ori	r24, 0x04	; 4
 216:	8b bb       	out	0x1b, r24	; 27
 218:	f5 e0       	ldi	r31, 0x05	; 5
 21a:	fa 95       	dec	r31
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_Command+0x6c>
 21e:	00 00       	nop
 220:	8b b3       	in	r24, 0x1b	; 27
 222:	8b 7f       	andi	r24, 0xFB	; 251
 224:	8b bb       	out	0x1b, r24	; 27
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	9f e1       	ldi	r25, 0x1F	; 31
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_Command+0x7c>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_Command+0x82>
 230:	00 00       	nop
 232:	08 95       	ret

00000234 <LCD_Init>:
 234:	87 b3       	in	r24, 0x17	; 23
 236:	87 61       	ori	r24, 0x17	; 23
 238:	87 bb       	out	0x17, r24	; 23
 23a:	8a b3       	in	r24, 0x1a	; 26
 23c:	8c 60       	ori	r24, 0x0C	; 12
 23e:	8a bb       	out	0x1a, r24	; 26
 240:	8f e5       	ldi	r24, 0x5F	; 95
 242:	9a ee       	ldi	r25, 0xEA	; 234
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <LCD_Init+0x10>
 248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_Init+0x16>
 24a:	00 00       	nop
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_Command>
 252:	88 e2       	ldi	r24, 0x28	; 40
 254:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_Command>
 258:	8c e0       	ldi	r24, 0x0C	; 12
 25a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_Command>
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_Command>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_Command>
 26a:	80 e8       	ldi	r24, 0x80	; 128
 26c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_Command>
 270:	08 95       	ret

00000272 <LCD_Char>:
 272:	98 b3       	in	r25, 0x18	; 24
 274:	98 7e       	andi	r25, 0xE8	; 232
 276:	98 bb       	out	0x18, r25	; 24
 278:	28 2f       	mov	r18, r24
 27a:	22 95       	swap	r18
 27c:	2f 70       	andi	r18, 0x0F	; 15
 27e:	38 b3       	in	r19, 0x18	; 24
 280:	92 2f       	mov	r25, r18
 282:	98 70       	andi	r25, 0x08	; 8
 284:	49 2f       	mov	r20, r25
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	27 70       	andi	r18, 0x07	; 7
 28e:	42 2b       	or	r20, r18
 290:	43 2b       	or	r20, r19
 292:	48 bb       	out	0x18, r20	; 24
 294:	9b b3       	in	r25, 0x1b	; 27
 296:	98 60       	ori	r25, 0x08	; 8
 298:	9b bb       	out	0x1b, r25	; 27
 29a:	9b b3       	in	r25, 0x1b	; 27
 29c:	94 60       	ori	r25, 0x04	; 4
 29e:	9b bb       	out	0x1b, r25	; 27
 2a0:	95 e0       	ldi	r25, 0x05	; 5
 2a2:	9a 95       	dec	r25
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_Char+0x30>
 2a6:	00 00       	nop
 2a8:	9b b3       	in	r25, 0x1b	; 27
 2aa:	9b 7f       	andi	r25, 0xFB	; 251
 2ac:	9b bb       	out	0x1b, r25	; 27
 2ae:	ef e8       	ldi	r30, 0x8F	; 143
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_Char+0x40>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_Char+0x46>
 2b8:	00 00       	nop
 2ba:	98 b3       	in	r25, 0x18	; 24
 2bc:	98 7e       	andi	r25, 0xE8	; 232
 2be:	98 bb       	out	0x18, r25	; 24
 2c0:	48 b3       	in	r20, 0x18	; 24
 2c2:	98 2f       	mov	r25, r24
 2c4:	98 70       	andi	r25, 0x08	; 8
 2c6:	29 2f       	mov	r18, r25
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	22 0f       	add	r18, r18
 2cc:	33 1f       	adc	r19, r19
 2ce:	87 70       	andi	r24, 0x07	; 7
 2d0:	28 2b       	or	r18, r24
 2d2:	24 2b       	or	r18, r20
 2d4:	28 bb       	out	0x18, r18	; 24
 2d6:	8b b3       	in	r24, 0x1b	; 27
 2d8:	84 60       	ori	r24, 0x04	; 4
 2da:	8b bb       	out	0x1b, r24	; 27
 2dc:	f5 e0       	ldi	r31, 0x05	; 5
 2de:	fa 95       	dec	r31
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD_Char+0x6c>
 2e2:	00 00       	nop
 2e4:	8b b3       	in	r24, 0x1b	; 27
 2e6:	8b 7f       	andi	r24, 0xFB	; 251
 2e8:	8b bb       	out	0x1b, r24	; 27
 2ea:	8f e8       	ldi	r24, 0x8F	; 143
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_Char+0x7c>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_Char+0x82>
 2f4:	00 00       	nop
 2f6:	08 95       	ret

000002f8 <LCD_String>:
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	8c 01       	movw	r16, r24
 302:	c0 e0       	ldi	r28, 0x00	; 0
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	03 c0       	rjmp	.+6      	; 0x30e <LCD_String+0x16>
 308:	0e 94 39 01 	call	0x272	; 0x272 <LCD_Char>
 30c:	21 96       	adiw	r28, 0x01	; 1
 30e:	f8 01       	movw	r30, r16
 310:	ec 0f       	add	r30, r28
 312:	fd 1f       	adc	r31, r29
 314:	80 81       	ld	r24, Z
 316:	81 11       	cpse	r24, r1
 318:	f7 cf       	rjmp	.-18     	; 0x308 <LCD_String+0x10>
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	08 95       	ret

00000324 <LCD_Clear>:
}
void LCD_Clear(void)
{
	LCD_Command(0x01);
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_Command>
 32a:	08 95       	ret

0000032c <bubbleSort>:
#include "keypad.h"
#include "seven_segment.h"
#include "LCD.h"
#include "Timer0.h"

void bubbleSort(int arr[], int size) {
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
	int i, j;
	for (i = 0; i < size - 1; i++) {
 334:	c0 e0       	ldi	r28, 0x00	; 0
 336:	d0 e0       	ldi	r29, 0x00	; 0
 338:	25 c0       	rjmp	.+74     	; 0x384 <bubbleSort+0x58>
		for (j = 0; j < size - i - 1; j++) {
			if (arr[j] > arr[j + 1]) {
 33a:	d9 01       	movw	r26, r18
 33c:	aa 0f       	add	r26, r26
 33e:	bb 1f       	adc	r27, r27
 340:	a8 0f       	add	r26, r24
 342:	b9 1f       	adc	r27, r25
 344:	4d 91       	ld	r20, X+
 346:	5c 91       	ld	r21, X
 348:	11 97       	sbiw	r26, 0x01	; 1
 34a:	f9 01       	movw	r30, r18
 34c:	31 96       	adiw	r30, 0x01	; 1
 34e:	ee 0f       	add	r30, r30
 350:	ff 1f       	adc	r31, r31
 352:	e8 0f       	add	r30, r24
 354:	f9 1f       	adc	r31, r25
 356:	00 81       	ld	r16, Z
 358:	11 81       	ldd	r17, Z+1	; 0x01
 35a:	04 17       	cp	r16, r20
 35c:	15 07       	cpc	r17, r21
 35e:	24 f4       	brge	.+8      	; 0x368 <bubbleSort+0x3c>
				// Swap elements
				int temp = arr[j];
				arr[j] = arr[j + 1];
 360:	0d 93       	st	X+, r16
 362:	1c 93       	st	X, r17
				arr[j + 1] = temp;
 364:	51 83       	std	Z+1, r21	; 0x01
 366:	40 83       	st	Z, r20
#include "Timer0.h"

void bubbleSort(int arr[], int size) {
	int i, j;
	for (i = 0; i < size - 1; i++) {
		for (j = 0; j < size - i - 1; j++) {
 368:	2f 5f       	subi	r18, 0xFF	; 255
 36a:	3f 4f       	sbci	r19, 0xFF	; 255
 36c:	02 c0       	rjmp	.+4      	; 0x372 <bubbleSort+0x46>
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	ab 01       	movw	r20, r22
 374:	4c 1b       	sub	r20, r28
 376:	5d 0b       	sbc	r21, r29
 378:	41 50       	subi	r20, 0x01	; 1
 37a:	51 09       	sbc	r21, r1
 37c:	24 17       	cp	r18, r20
 37e:	35 07       	cpc	r19, r21
 380:	e4 f2       	brlt	.-72     	; 0x33a <bubbleSort+0xe>
#include "LCD.h"
#include "Timer0.h"

void bubbleSort(int arr[], int size) {
	int i, j;
	for (i = 0; i < size - 1; i++) {
 382:	21 96       	adiw	r28, 0x01	; 1
 384:	9b 01       	movw	r18, r22
 386:	21 50       	subi	r18, 0x01	; 1
 388:	31 09       	sbc	r19, r1
 38a:	c2 17       	cp	r28, r18
 38c:	d3 07       	cpc	r29, r19
 38e:	7c f3       	brlt	.-34     	; 0x36e <bubbleSort+0x42>
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <main>:
int main(void)
{
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	68 97       	sbiw	r28, 0x18	; 24
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	f8 94       	cli
 3a8:	de bf       	out	0x3e, r29	; 62
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	cd bf       	out	0x3d, r28	; 61
seven_segment_Init();
 3ae:	0e 94 a7 02 	call	0x54e	; 0x54e <seven_segment_Init>
LCD_Init();
 3b2:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_Init>
keypad_Init();
 3b6:	0e 94 49 00 	call	0x92	; 0x92 <keypad_Init>
Timer0_init();
 3ba:	0e 94 46 03 	call	0x68c	; 0x68c <Timer0_init>
uint8 value;
int Number[10]={0},i; //number user input
 3be:	fe 01       	movw	r30, r28
 3c0:	31 96       	adiw	r30, 0x01	; 1
 3c2:	84 e1       	ldi	r24, 0x14	; 20
 3c4:	df 01       	movw	r26, r30
 3c6:	1d 92       	st	X+, r1
 3c8:	8a 95       	dec	r24
 3ca:	e9 f7       	brne	.-6      	; 0x3c6 <main+0x2c>
bool check=TRUE;
char str[4]; //To covert int to string 
int count_digit=0,num=0,digit;	// count_digit : to count number of digits user input
 3cc:	e1 2c       	mov	r14, r1
 3ce:	f1 2c       	mov	r15, r1
 3d0:	00 e0       	ldi	r16, 0x00	; 0
 3d2:	10 e0       	ldi	r17, 0x00	; 0
LCD_Init();
keypad_Init();
Timer0_init();
uint8 value;
int Number[10]={0},i; //number user input
bool check=TRUE;
 3d4:	cc 24       	eor	r12, r12
 3d6:	c3 94       	inc	r12
								//num: index for Number store input
								//digit: user to convert to decimal			

				
do{
	value=keypad_get_value(); /*scan value from keypad*/
 3d8:	0e 94 6e 00 	call	0xdc	; 0xdc <keypad_get_value>
 3dc:	d8 2e       	mov	r13, r24
	if (value)
 3de:	88 23       	and	r24, r24
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <main+0x4a>
 3e2:	50 c0       	rjmp	.+160    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
	{	
		if (value >='0' && value <='9' && count_digit < 4) //check if input  number or not
 3e4:	80 ed       	ldi	r24, 0xD0	; 208
 3e6:	8d 0d       	add	r24, r13
 3e8:	8a 30       	cpi	r24, 0x0A	; 10
 3ea:	90 f5       	brcc	.+100    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3ec:	04 30       	cpi	r16, 0x04	; 4
 3ee:	11 05       	cpc	r17, r1
 3f0:	7c f5       	brge	.+94     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		{
			digit = value - '0';
 3f2:	8d 2d       	mov	r24, r13
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	9c 01       	movw	r18, r24
 3f8:	20 53       	subi	r18, 0x30	; 48
 3fa:	31 09       	sbc	r19, r1
			Number[num] = (Number[num] * 10) + digit;
 3fc:	f7 01       	movw	r30, r14
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	8c 0f       	add	r24, r28
 408:	9d 1f       	adc	r25, r29
 40a:	e8 0f       	add	r30, r24
 40c:	f9 1f       	adc	r31, r25
 40e:	80 81       	ld	r24, Z
 410:	91 81       	ldd	r25, Z+1	; 0x01
 412:	ac 01       	movw	r20, r24
 414:	44 0f       	add	r20, r20
 416:	55 1f       	adc	r21, r21
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	84 0f       	add	r24, r20
 426:	95 1f       	adc	r25, r21
 428:	82 0f       	add	r24, r18
 42a:	93 1f       	adc	r25, r19
 42c:	91 83       	std	Z+1, r25	; 0x01
 42e:	80 83       	st	Z, r24
			count_digit++;
 430:	0f 5f       	subi	r16, 0xFF	; 255
 432:	1f 4f       	sbci	r17, 0xFF	; 255
			LCD_Char(value);
 434:	8d 2d       	mov	r24, r13
 436:	0e 94 39 01 	call	0x272	; 0x272 <LCD_Char>
 43a:	9f ef       	ldi	r25, 0xFF	; 255
 43c:	a4 e3       	ldi	r26, 0x34	; 52
 43e:	bc e0       	ldi	r27, 0x0C	; 12
 440:	91 50       	subi	r25, 0x01	; 1
 442:	a0 40       	sbci	r26, 0x00	; 0
 444:	b0 40       	sbci	r27, 0x00	; 0
 446:	e1 f7       	brne	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 44a:	00 00       	nop
			_delay_ms(250);
			check=TRUE;
 44c:	cc 24       	eor	r12, r12
 44e:	c3 94       	inc	r12
		}
		if (value == '+') //check if user input more than 4 digit or user input other number
 450:	2b e2       	ldi	r18, 0x2B	; 43
 452:	d2 12       	cpse	r13, r18
 454:	17 c0       	rjmp	.+46     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
		{
			LCD_Char(' ');
 456:	80 e2       	ldi	r24, 0x20	; 32
 458:	0e 94 39 01 	call	0x272	; 0x272 <LCD_Char>
 45c:	8f ef       	ldi	r24, 0xFF	; 255
 45e:	90 e7       	ldi	r25, 0x70	; 112
 460:	a2 e0       	ldi	r26, 0x02	; 2
 462:	81 50       	subi	r24, 0x01	; 1
 464:	90 40       	sbci	r25, 0x00	; 0
 466:	a0 40       	sbci	r26, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
			count_digit=0;
			_delay_ms(50);
			if (check) //To avoid increase size of array when button + pressed more one 
 46e:	cc 20       	and	r12, r12
 470:	39 f0       	breq	.+14     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			{
				num++;
 472:	bf ef       	ldi	r27, 0xFF	; 255
 474:	eb 1a       	sub	r14, r27
 476:	fb 0a       	sbc	r15, r27
			check=TRUE;
		}
		if (value == '+') //check if user input more than 4 digit or user input other number
		{
			LCD_Char(' ');
			count_digit=0;
 478:	00 e0       	ldi	r16, 0x00	; 0
 47a:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(50);
			if (check) //To avoid increase size of array when button + pressed more one 
			{
				num++;
				check=FALSE;
 47c:	c1 2c       	mov	r12, r1
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
			check=TRUE;
		}
		if (value == '+') //check if user input more than 4 digit or user input other number
		{
			LCD_Char(' ');
			count_digit=0;
 480:	00 e0       	ldi	r16, 0x00	; 0
 482:	10 e0       	ldi	r17, 0x00	; 0
				num++;
				check=FALSE;
			}
		}		
	}
}while (value != 'E');
 484:	25 e4       	ldi	r18, 0x45	; 69
 486:	d2 12       	cpse	r13, r18
 488:	a7 cf       	rjmp	.-178    	; 0x3d8 <main+0x3e>

if (num > 0)
 48a:	1e 14       	cp	r1, r14
 48c:	1f 04       	cpc	r1, r15
 48e:	0c f0       	brlt	.+2      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 490:	48 c0       	rjmp	.+144    	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
{
LCD_Clear();
 492:	0e 94 92 01 	call	0x324	; 0x324 <LCD_Clear>
bubbleSort(Number,num+1);
 496:	b7 01       	movw	r22, r14
 498:	6f 5f       	subi	r22, 0xFF	; 255
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	ce 01       	movw	r24, r28
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	0e 94 96 01 	call	0x32c	; 0x32c <bubbleSort>
for (i = 0; i <=num; i++)
 4a4:	00 e0       	ldi	r16, 0x00	; 0
 4a6:	10 e0       	ldi	r17, 0x00	; 0
 4a8:	39 c0       	rjmp	.+114    	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
{	
	LCD_Char(' ');
 4aa:	80 e2       	ldi	r24, 0x20	; 32
 4ac:	0e 94 39 01 	call	0x272	; 0x272 <LCD_Char>
 4b0:	8f ef       	ldi	r24, 0xFF	; 255
 4b2:	94 e3       	ldi	r25, 0x34	; 52
 4b4:	ac e0       	ldi	r26, 0x0C	; 12
 4b6:	81 50       	subi	r24, 0x01	; 1
 4b8:	90 40       	sbci	r25, 0x00	; 0
 4ba:	a0 40       	sbci	r26, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4c0:	00 00       	nop
	_delay_ms(250);
	 sprintf(str, "%d", Number[i]);
 4c2:	f8 01       	movw	r30, r16
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	8c 0f       	add	r24, r28
 4ce:	9d 1f       	adc	r25, r29
 4d0:	e8 0f       	add	r30, r24
 4d2:	f9 1f       	adc	r31, r25
 4d4:	81 81       	ldd	r24, Z+1	; 0x01
 4d6:	8f 93       	push	r24
 4d8:	80 81       	ld	r24, Z
 4da:	8f 93       	push	r24
 4dc:	80 e7       	ldi	r24, 0x70	; 112
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	9f 93       	push	r25
 4e2:	8f 93       	push	r24
 4e4:	6e 01       	movw	r12, r28
 4e6:	95 e1       	ldi	r25, 0x15	; 21
 4e8:	c9 0e       	add	r12, r25
 4ea:	d1 1c       	adc	r13, r1
 4ec:	df 92       	push	r13
 4ee:	cf 92       	push	r12
 4f0:	0e 94 a3 03 	call	0x746	; 0x746 <sprintf>
 4f4:	af ef       	ldi	r26, 0xFF	; 255
 4f6:	b9 e6       	ldi	r27, 0x69	; 105
 4f8:	28 e1       	ldi	r18, 0x18	; 24
 4fa:	a1 50       	subi	r26, 0x01	; 1
 4fc:	b0 40       	sbci	r27, 0x00	; 0
 4fe:	20 40       	sbci	r18, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 502:	00 c0       	rjmp	.+0      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 504:	00 00       	nop
	 _delay_ms(500);
	 LCD_String(str);
 506:	c6 01       	movw	r24, r12
 508:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_String>

if (num > 0)
{
LCD_Clear();
bubbleSort(Number,num+1);
for (i = 0; i <=num; i++)
 50c:	0f 5f       	subi	r16, 0xFF	; 255
 50e:	1f 4f       	sbci	r17, 0xFF	; 255
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
 518:	0f 90       	pop	r0
 51a:	0f 90       	pop	r0
 51c:	e0 16       	cp	r14, r16
 51e:	f1 06       	cpc	r15, r17
 520:	24 f6       	brge	.-120    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
	 LCD_String(str);
}
}
while(1)
{	
for (i = 0; i <=num; i++)
 522:	00 e0       	ldi	r16, 0x00	; 0
 524:	10 e0       	ldi	r17, 0x00	; 0
 526:	0f c0       	rjmp	.+30     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
{
	seven_segment_number(Number[i]);
 528:	f8 01       	movw	r30, r16
 52a:	ee 0f       	add	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	8c 0f       	add	r24, r28
 534:	9d 1f       	adc	r25, r29
 536:	e8 0f       	add	r30, r24
 538:	f9 1f       	adc	r31, r25
 53a:	80 81       	ld	r24, Z
 53c:	91 81       	ldd	r25, Z+1	; 0x01
 53e:	0e 94 c6 02 	call	0x58c	; 0x58c <seven_segment_number>
	 LCD_String(str);
}
}
while(1)
{	
for (i = 0; i <=num; i++)
 542:	0f 5f       	subi	r16, 0xFF	; 255
 544:	1f 4f       	sbci	r17, 0xFF	; 255
 546:	e0 16       	cp	r14, r16
 548:	f1 06       	cpc	r15, r17
 54a:	74 f7       	brge	.-36     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 54c:	ea cf       	rjmp	.-44     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>

0000054e <seven_segment_Init>:
 */ 
#include "seven_segment.h"

void seven_segment_Init(void)
{
	SET_BIT(DDRB,COM1); /*Enable first seven segment*/
 54e:	87 b3       	in	r24, 0x17	; 23
 550:	80 64       	ori	r24, 0x40	; 64
 552:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,COM2);/*Enable second seven segment*/
 554:	87 b3       	in	r24, 0x17	; 23
 556:	80 62       	ori	r24, 0x20	; 32
 558:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRA,COM3); /*Enable third seven segment*/
 55a:	8a b3       	in	r24, 0x1a	; 26
 55c:	84 60       	ori	r24, 0x04	; 4
 55e:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,COM4); /*Enable fourth seven segment*/
 560:	8a b3       	in	r24, 0x1a	; 26
 562:	88 60       	ori	r24, 0x08	; 8
 564:	8a bb       	out	0x1a, r24	; 26
	
	
	
	seven_segment_Data_Dir|=0b00010111;     	/*set PB0 ,PB1,PB2,PB4*/
 566:	87 b3       	in	r24, 0x17	; 23
 568:	87 61       	ori	r24, 0x17	; 23
 56a:	87 bb       	out	0x17, r24	; 23
 56c:	08 95       	ret

0000056e <seven_segment_Display>:
}
void seven_segment_Display(unsigned char number)
{	
	seven_segment_Data_port&=0b11101000; /*Clear the 4-bits*/	                                                                                                                              
 56e:	98 b3       	in	r25, 0x18	; 24
 570:	98 7e       	andi	r25, 0xE8	; 232
 572:	98 bb       	out	0x18, r25	; 24
	seven_segment_Data_port|= (((number&0b00001000)<<1)| (number&0b00000111)); /*Display the number*/
 574:	48 b3       	in	r20, 0x18	; 24
 576:	98 2f       	mov	r25, r24
 578:	98 70       	andi	r25, 0x08	; 8
 57a:	29 2f       	mov	r18, r25
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	22 0f       	add	r18, r18
 580:	33 1f       	adc	r19, r19
 582:	87 70       	andi	r24, 0x07	; 7
 584:	28 2b       	or	r18, r24
 586:	24 2b       	or	r18, r20
 588:	28 bb       	out	0x18, r18	; 24
 58a:	08 95       	ret

0000058c <seven_segment_number>:
}
void seven_segment_number(int number) {
 58c:	1f 93       	push	r17
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	fc 01       	movw	r30, r24
  
	SET_BIT(PORTB,COM1);
 594:	88 b3       	in	r24, 0x18	; 24
 596:	80 64       	ori	r24, 0x40	; 64
 598:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,COM2);
 59a:	88 b3       	in	r24, 0x18	; 24
 59c:	80 62       	ori	r24, 0x20	; 32
 59e:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTA,COM3);
 5a0:	8b b3       	in	r24, 0x1b	; 27
 5a2:	84 60       	ori	r24, 0x04	; 4
 5a4:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTA,COM4);
 5a6:	8b b3       	in	r24, 0x1b	; 27
 5a8:	88 60       	ori	r24, 0x08	; 8
 5aa:	8b bb       	out	0x1b, r24	; 27
	
	// Split the number into individual digits
	int digit4 = number % 10;
 5ac:	2a e0       	ldi	r18, 0x0A	; 10
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	cf 01       	movw	r24, r30
 5b2:	b9 01       	movw	r22, r18
 5b4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divmodhi4>
 5b8:	c8 2f       	mov	r28, r24
	int digit3 = (number / 10) % 10;
 5ba:	cb 01       	movw	r24, r22
 5bc:	b9 01       	movw	r22, r18
 5be:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divmodhi4>
 5c2:	d8 2f       	mov	r29, r24
	int digit2 = (number / 100) % 10;
 5c4:	cf 01       	movw	r24, r30
 5c6:	64 e6       	ldi	r22, 0x64	; 100
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divmodhi4>
 5ce:	cb 01       	movw	r24, r22
 5d0:	b9 01       	movw	r22, r18
 5d2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divmodhi4>
 5d6:	18 2f       	mov	r17, r24
	int digit1 = (number / 1000) % 10;
 5d8:	cf 01       	movw	r24, r30
 5da:	68 ee       	ldi	r22, 0xE8	; 232
 5dc:	73 e0       	ldi	r23, 0x03	; 3
 5de:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divmodhi4>
 5e2:	cb 01       	movw	r24, r22
 5e4:	b9 01       	movw	r22, r18
 5e6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divmodhi4>
 5ea:	2f ef       	ldi	r18, 0xFF	; 255
 5ec:	33 ed       	ldi	r19, 0xD3	; 211
 5ee:	90 e3       	ldi	r25, 0x30	; 48
 5f0:	21 50       	subi	r18, 0x01	; 1
 5f2:	30 40       	sbci	r19, 0x00	; 0
 5f4:	90 40       	sbci	r25, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <seven_segment_number+0x64>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <seven_segment_number+0x6e>
 5fa:	00 00       	nop
		_delay_ms(1000);
	// Display the digits on the seven-segment display
	CLR_BIT(PORTB,COM1);
 5fc:	98 b3       	in	r25, 0x18	; 24
 5fe:	9f 7b       	andi	r25, 0xBF	; 191
 600:	98 bb       	out	0x18, r25	; 24
	seven_segment_Display( digit1);
 602:	0e 94 b7 02 	call	0x56e	; 0x56e <seven_segment_Display>
 606:	2f ef       	ldi	r18, 0xFF	; 255
 608:	33 ed       	ldi	r19, 0xD3	; 211
 60a:	80 e3       	ldi	r24, 0x30	; 48
 60c:	21 50       	subi	r18, 0x01	; 1
 60e:	30 40       	sbci	r19, 0x00	; 0
 610:	80 40       	sbci	r24, 0x00	; 0
 612:	e1 f7       	brne	.-8      	; 0x60c <seven_segment_number+0x80>
 614:	00 c0       	rjmp	.+0      	; 0x616 <seven_segment_number+0x8a>
 616:	00 00       	nop
	_delay_ms(1000);
	SET_BIT(PORTB,COM1);
 618:	88 b3       	in	r24, 0x18	; 24
 61a:	80 64       	ori	r24, 0x40	; 64
 61c:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(PORTB,COM2);
 61e:	88 b3       	in	r24, 0x18	; 24
 620:	8f 7d       	andi	r24, 0xDF	; 223
 622:	88 bb       	out	0x18, r24	; 24
	seven_segment_Display( digit2);
 624:	81 2f       	mov	r24, r17
 626:	0e 94 b7 02 	call	0x56e	; 0x56e <seven_segment_Display>
 62a:	9f ef       	ldi	r25, 0xFF	; 255
 62c:	23 ed       	ldi	r18, 0xD3	; 211
 62e:	30 e3       	ldi	r19, 0x30	; 48
 630:	91 50       	subi	r25, 0x01	; 1
 632:	20 40       	sbci	r18, 0x00	; 0
 634:	30 40       	sbci	r19, 0x00	; 0
 636:	e1 f7       	brne	.-8      	; 0x630 <seven_segment_number+0xa4>
 638:	00 c0       	rjmp	.+0      	; 0x63a <seven_segment_number+0xae>
 63a:	00 00       	nop
	_delay_ms(1000);
	SET_BIT(PORTB,COM2);
 63c:	88 b3       	in	r24, 0x18	; 24
 63e:	80 62       	ori	r24, 0x20	; 32
 640:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(PORTA,COM3);
 642:	8b b3       	in	r24, 0x1b	; 27
 644:	8b 7f       	andi	r24, 0xFB	; 251
 646:	8b bb       	out	0x1b, r24	; 27
	seven_segment_Display( digit3);
 648:	8d 2f       	mov	r24, r29
 64a:	0e 94 b7 02 	call	0x56e	; 0x56e <seven_segment_Display>
 64e:	8f ef       	ldi	r24, 0xFF	; 255
 650:	93 ed       	ldi	r25, 0xD3	; 211
 652:	20 e3       	ldi	r18, 0x30	; 48
 654:	81 50       	subi	r24, 0x01	; 1
 656:	90 40       	sbci	r25, 0x00	; 0
 658:	20 40       	sbci	r18, 0x00	; 0
 65a:	e1 f7       	brne	.-8      	; 0x654 <seven_segment_number+0xc8>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <seven_segment_number+0xd2>
 65e:	00 00       	nop
	_delay_ms(1000);
	SET_BIT(PORTA,COM3);
 660:	8b b3       	in	r24, 0x1b	; 27
 662:	84 60       	ori	r24, 0x04	; 4
 664:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTA,COM4);
 666:	8b b3       	in	r24, 0x1b	; 27
 668:	87 7f       	andi	r24, 0xF7	; 247
 66a:	8b bb       	out	0x1b, r24	; 27
	seven_segment_Display(digit4);
 66c:	8c 2f       	mov	r24, r28
 66e:	0e 94 b7 02 	call	0x56e	; 0x56e <seven_segment_Display>
 672:	3f ef       	ldi	r19, 0xFF	; 255
 674:	83 ed       	ldi	r24, 0xD3	; 211
 676:	90 e3       	ldi	r25, 0x30	; 48
 678:	31 50       	subi	r19, 0x01	; 1
 67a:	80 40       	sbci	r24, 0x00	; 0
 67c:	90 40       	sbci	r25, 0x00	; 0
 67e:	e1 f7       	brne	.-8      	; 0x678 <seven_segment_number+0xec>
 680:	00 c0       	rjmp	.+0      	; 0x682 <seven_segment_number+0xf6>
 682:	00 00       	nop
	_delay_ms(1000);
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	1f 91       	pop	r17
 68a:	08 95       	ret

0000068c <Timer0_init>:
	SET_BIT(SREG,I_BIT);
}
void Timer0_setcallback(void(*ptr)(uint8),uint8 value)
{
g_callbackPTR=ptr;	
g_callbackValue=value;
 68c:	12 be       	out	0x32, r1	; 50
 68e:	89 b7       	in	r24, 0x39	; 57
 690:	81 60       	ori	r24, 0x01	; 1
 692:	89 bf       	out	0x39, r24	; 57
 694:	85 e8       	ldi	r24, 0x85	; 133
 696:	83 bf       	out	0x33, r24	; 51
 698:	8f b7       	in	r24, 0x3f	; 63
 69a:	80 68       	ori	r24, 0x80	; 128
 69c:	8f bf       	out	0x3f, r24	; 63
 69e:	08 95       	ret

000006a0 <__vector_11>:
}
ISR(TIMER0_OVF_vect)
{
 6a0:	1f 92       	push	r1
 6a2:	0f 92       	push	r0
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	0f 92       	push	r0
 6a8:	11 24       	eor	r1, r1
 6aa:	2f 93       	push	r18
 6ac:	3f 93       	push	r19
 6ae:	4f 93       	push	r20
 6b0:	5f 93       	push	r21
 6b2:	6f 93       	push	r22
 6b4:	7f 93       	push	r23
 6b6:	8f 93       	push	r24
 6b8:	9f 93       	push	r25
 6ba:	af 93       	push	r26
 6bc:	bf 93       	push	r27
 6be:	ef 93       	push	r30
 6c0:	ff 93       	push	r31
	if (g_callbackPTR!=NULL_PTR)
 6c2:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <g_callbackPTR>
 6c6:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <g_callbackPTR+0x1>
 6ca:	30 97       	sbiw	r30, 0x00	; 0
 6cc:	19 f0       	breq	.+6      	; 0x6d4 <__vector_11+0x34>
	{
		
		(*g_callbackPTR)(g_callbackValue);
 6ce:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 6d2:	09 95       	icall
	}
 6d4:	ff 91       	pop	r31
 6d6:	ef 91       	pop	r30
 6d8:	bf 91       	pop	r27
 6da:	af 91       	pop	r26
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	7f 91       	pop	r23
 6e2:	6f 91       	pop	r22
 6e4:	5f 91       	pop	r21
 6e6:	4f 91       	pop	r20
 6e8:	3f 91       	pop	r19
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <__divmodhi4>:
 6f6:	97 fb       	bst	r25, 7
 6f8:	07 2e       	mov	r0, r23
 6fa:	16 f4       	brtc	.+4      	; 0x700 <__divmodhi4+0xa>
 6fc:	00 94       	com	r0
 6fe:	07 d0       	rcall	.+14     	; 0x70e <__divmodhi4_neg1>
 700:	77 fd       	sbrc	r23, 7
 702:	09 d0       	rcall	.+18     	; 0x716 <__divmodhi4_neg2>
 704:	0e 94 8f 03 	call	0x71e	; 0x71e <__udivmodhi4>
 708:	07 fc       	sbrc	r0, 7
 70a:	05 d0       	rcall	.+10     	; 0x716 <__divmodhi4_neg2>
 70c:	3e f4       	brtc	.+14     	; 0x71c <__divmodhi4_exit>

0000070e <__divmodhi4_neg1>:
 70e:	90 95       	com	r25
 710:	81 95       	neg	r24
 712:	9f 4f       	sbci	r25, 0xFF	; 255
 714:	08 95       	ret

00000716 <__divmodhi4_neg2>:
 716:	70 95       	com	r23
 718:	61 95       	neg	r22
 71a:	7f 4f       	sbci	r23, 0xFF	; 255

0000071c <__divmodhi4_exit>:
 71c:	08 95       	ret

0000071e <__udivmodhi4>:
 71e:	aa 1b       	sub	r26, r26
 720:	bb 1b       	sub	r27, r27
 722:	51 e1       	ldi	r21, 0x11	; 17
 724:	07 c0       	rjmp	.+14     	; 0x734 <__udivmodhi4_ep>

00000726 <__udivmodhi4_loop>:
 726:	aa 1f       	adc	r26, r26
 728:	bb 1f       	adc	r27, r27
 72a:	a6 17       	cp	r26, r22
 72c:	b7 07       	cpc	r27, r23
 72e:	10 f0       	brcs	.+4      	; 0x734 <__udivmodhi4_ep>
 730:	a6 1b       	sub	r26, r22
 732:	b7 0b       	sbc	r27, r23

00000734 <__udivmodhi4_ep>:
 734:	88 1f       	adc	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	5a 95       	dec	r21
 73a:	a9 f7       	brne	.-22     	; 0x726 <__udivmodhi4_loop>
 73c:	80 95       	com	r24
 73e:	90 95       	com	r25
 740:	bc 01       	movw	r22, r24
 742:	cd 01       	movw	r24, r26
 744:	08 95       	ret

00000746 <sprintf>:
 746:	ae e0       	ldi	r26, 0x0E	; 14
 748:	b0 e0       	ldi	r27, 0x00	; 0
 74a:	e9 ea       	ldi	r30, 0xA9	; 169
 74c:	f3 e0       	ldi	r31, 0x03	; 3
 74e:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__prologue_saves__+0x1c>
 752:	0d 89       	ldd	r16, Y+21	; 0x15
 754:	1e 89       	ldd	r17, Y+22	; 0x16
 756:	86 e0       	ldi	r24, 0x06	; 6
 758:	8c 83       	std	Y+4, r24	; 0x04
 75a:	1a 83       	std	Y+2, r17	; 0x02
 75c:	09 83       	std	Y+1, r16	; 0x01
 75e:	8f ef       	ldi	r24, 0xFF	; 255
 760:	9f e7       	ldi	r25, 0x7F	; 127
 762:	9e 83       	std	Y+6, r25	; 0x06
 764:	8d 83       	std	Y+5, r24	; 0x05
 766:	ae 01       	movw	r20, r28
 768:	47 5e       	subi	r20, 0xE7	; 231
 76a:	5f 4f       	sbci	r21, 0xFF	; 255
 76c:	6f 89       	ldd	r22, Y+23	; 0x17
 76e:	78 8d       	ldd	r23, Y+24	; 0x18
 770:	ce 01       	movw	r24, r28
 772:	01 96       	adiw	r24, 0x01	; 1
 774:	0e 94 c5 03 	call	0x78a	; 0x78a <vfprintf>
 778:	ef 81       	ldd	r30, Y+7	; 0x07
 77a:	f8 85       	ldd	r31, Y+8	; 0x08
 77c:	e0 0f       	add	r30, r16
 77e:	f1 1f       	adc	r31, r17
 780:	10 82       	st	Z, r1
 782:	2e 96       	adiw	r28, 0x0e	; 14
 784:	e4 e0       	ldi	r30, 0x04	; 4
 786:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__epilogue_restores__+0x1c>

0000078a <vfprintf>:
 78a:	ab e0       	ldi	r26, 0x0B	; 11
 78c:	b0 e0       	ldi	r27, 0x00	; 0
 78e:	eb ec       	ldi	r30, 0xCB	; 203
 790:	f3 e0       	ldi	r31, 0x03	; 3
 792:	0c 94 56 06 	jmp	0xcac	; 0xcac <__prologue_saves__>
 796:	6c 01       	movw	r12, r24
 798:	7b 01       	movw	r14, r22
 79a:	8a 01       	movw	r16, r20
 79c:	fc 01       	movw	r30, r24
 79e:	17 82       	std	Z+7, r1	; 0x07
 7a0:	16 82       	std	Z+6, r1	; 0x06
 7a2:	83 81       	ldd	r24, Z+3	; 0x03
 7a4:	81 ff       	sbrs	r24, 1
 7a6:	cc c1       	rjmp	.+920    	; 0xb40 <__stack+0x2e1>
 7a8:	ce 01       	movw	r24, r28
 7aa:	01 96       	adiw	r24, 0x01	; 1
 7ac:	3c 01       	movw	r6, r24
 7ae:	f6 01       	movw	r30, r12
 7b0:	93 81       	ldd	r25, Z+3	; 0x03
 7b2:	f7 01       	movw	r30, r14
 7b4:	93 fd       	sbrc	r25, 3
 7b6:	85 91       	lpm	r24, Z+
 7b8:	93 ff       	sbrs	r25, 3
 7ba:	81 91       	ld	r24, Z+
 7bc:	7f 01       	movw	r14, r30
 7be:	88 23       	and	r24, r24
 7c0:	09 f4       	brne	.+2      	; 0x7c4 <vfprintf+0x3a>
 7c2:	ba c1       	rjmp	.+884    	; 0xb38 <__stack+0x2d9>
 7c4:	85 32       	cpi	r24, 0x25	; 37
 7c6:	39 f4       	brne	.+14     	; 0x7d6 <vfprintf+0x4c>
 7c8:	93 fd       	sbrc	r25, 3
 7ca:	85 91       	lpm	r24, Z+
 7cc:	93 ff       	sbrs	r25, 3
 7ce:	81 91       	ld	r24, Z+
 7d0:	7f 01       	movw	r14, r30
 7d2:	85 32       	cpi	r24, 0x25	; 37
 7d4:	29 f4       	brne	.+10     	; 0x7e0 <vfprintf+0x56>
 7d6:	b6 01       	movw	r22, r12
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	0e 94 bc 05 	call	0xb78	; 0xb78 <fputc>
 7de:	e7 cf       	rjmp	.-50     	; 0x7ae <vfprintf+0x24>
 7e0:	91 2c       	mov	r9, r1
 7e2:	21 2c       	mov	r2, r1
 7e4:	31 2c       	mov	r3, r1
 7e6:	ff e1       	ldi	r31, 0x1F	; 31
 7e8:	f3 15       	cp	r31, r3
 7ea:	d8 f0       	brcs	.+54     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7ec:	8b 32       	cpi	r24, 0x2B	; 43
 7ee:	79 f0       	breq	.+30     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f0:	38 f4       	brcc	.+14     	; 0x800 <__DATA_REGION_LENGTH__>
 7f2:	80 32       	cpi	r24, 0x20	; 32
 7f4:	79 f0       	breq	.+30     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7f6:	83 32       	cpi	r24, 0x23	; 35
 7f8:	a1 f4       	brne	.+40     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7fa:	23 2d       	mov	r18, r3
 7fc:	20 61       	ori	r18, 0x10	; 16
 7fe:	1d c0       	rjmp	.+58     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 800:	8d 32       	cpi	r24, 0x2D	; 45
 802:	61 f0       	breq	.+24     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 804:	80 33       	cpi	r24, 0x30	; 48
 806:	69 f4       	brne	.+26     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 808:	23 2d       	mov	r18, r3
 80a:	21 60       	ori	r18, 0x01	; 1
 80c:	16 c0       	rjmp	.+44     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 80e:	83 2d       	mov	r24, r3
 810:	82 60       	ori	r24, 0x02	; 2
 812:	38 2e       	mov	r3, r24
 814:	e3 2d       	mov	r30, r3
 816:	e4 60       	ori	r30, 0x04	; 4
 818:	3e 2e       	mov	r3, r30
 81a:	2a c0       	rjmp	.+84     	; 0x870 <__stack+0x11>
 81c:	f3 2d       	mov	r31, r3
 81e:	f8 60       	ori	r31, 0x08	; 8
 820:	1d c0       	rjmp	.+58     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 822:	37 fc       	sbrc	r3, 7
 824:	2d c0       	rjmp	.+90     	; 0x880 <__stack+0x21>
 826:	20 ed       	ldi	r18, 0xD0	; 208
 828:	28 0f       	add	r18, r24
 82a:	2a 30       	cpi	r18, 0x0A	; 10
 82c:	40 f0       	brcs	.+16     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 82e:	8e 32       	cpi	r24, 0x2E	; 46
 830:	b9 f4       	brne	.+46     	; 0x860 <__stack+0x1>
 832:	36 fc       	sbrc	r3, 6
 834:	81 c1       	rjmp	.+770    	; 0xb38 <__stack+0x2d9>
 836:	23 2d       	mov	r18, r3
 838:	20 64       	ori	r18, 0x40	; 64
 83a:	32 2e       	mov	r3, r18
 83c:	19 c0       	rjmp	.+50     	; 0x870 <__stack+0x11>
 83e:	36 fe       	sbrs	r3, 6
 840:	06 c0       	rjmp	.+12     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 842:	8a e0       	ldi	r24, 0x0A	; 10
 844:	98 9e       	mul	r9, r24
 846:	20 0d       	add	r18, r0
 848:	11 24       	eor	r1, r1
 84a:	92 2e       	mov	r9, r18
 84c:	11 c0       	rjmp	.+34     	; 0x870 <__stack+0x11>
 84e:	ea e0       	ldi	r30, 0x0A	; 10
 850:	2e 9e       	mul	r2, r30
 852:	20 0d       	add	r18, r0
 854:	11 24       	eor	r1, r1
 856:	22 2e       	mov	r2, r18
 858:	f3 2d       	mov	r31, r3
 85a:	f0 62       	ori	r31, 0x20	; 32
 85c:	3f 2e       	mov	r3, r31
 85e:	08 c0       	rjmp	.+16     	; 0x870 <__stack+0x11>
 860:	8c 36       	cpi	r24, 0x6C	; 108
 862:	21 f4       	brne	.+8      	; 0x86c <__stack+0xd>
 864:	83 2d       	mov	r24, r3
 866:	80 68       	ori	r24, 0x80	; 128
 868:	38 2e       	mov	r3, r24
 86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
 86c:	88 36       	cpi	r24, 0x68	; 104
 86e:	41 f4       	brne	.+16     	; 0x880 <__stack+0x21>
 870:	f7 01       	movw	r30, r14
 872:	93 fd       	sbrc	r25, 3
 874:	85 91       	lpm	r24, Z+
 876:	93 ff       	sbrs	r25, 3
 878:	81 91       	ld	r24, Z+
 87a:	7f 01       	movw	r14, r30
 87c:	81 11       	cpse	r24, r1
 87e:	b3 cf       	rjmp	.-154    	; 0x7e6 <vfprintf+0x5c>
 880:	98 2f       	mov	r25, r24
 882:	9f 7d       	andi	r25, 0xDF	; 223
 884:	95 54       	subi	r25, 0x45	; 69
 886:	93 30       	cpi	r25, 0x03	; 3
 888:	28 f4       	brcc	.+10     	; 0x894 <__stack+0x35>
 88a:	0c 5f       	subi	r16, 0xFC	; 252
 88c:	1f 4f       	sbci	r17, 0xFF	; 255
 88e:	9f e3       	ldi	r25, 0x3F	; 63
 890:	99 83       	std	Y+1, r25	; 0x01
 892:	0d c0       	rjmp	.+26     	; 0x8ae <__stack+0x4f>
 894:	83 36       	cpi	r24, 0x63	; 99
 896:	31 f0       	breq	.+12     	; 0x8a4 <__stack+0x45>
 898:	83 37       	cpi	r24, 0x73	; 115
 89a:	71 f0       	breq	.+28     	; 0x8b8 <__stack+0x59>
 89c:	83 35       	cpi	r24, 0x53	; 83
 89e:	09 f0       	breq	.+2      	; 0x8a2 <__stack+0x43>
 8a0:	59 c0       	rjmp	.+178    	; 0x954 <__stack+0xf5>
 8a2:	21 c0       	rjmp	.+66     	; 0x8e6 <__stack+0x87>
 8a4:	f8 01       	movw	r30, r16
 8a6:	80 81       	ld	r24, Z
 8a8:	89 83       	std	Y+1, r24	; 0x01
 8aa:	0e 5f       	subi	r16, 0xFE	; 254
 8ac:	1f 4f       	sbci	r17, 0xFF	; 255
 8ae:	88 24       	eor	r8, r8
 8b0:	83 94       	inc	r8
 8b2:	91 2c       	mov	r9, r1
 8b4:	53 01       	movw	r10, r6
 8b6:	13 c0       	rjmp	.+38     	; 0x8de <__stack+0x7f>
 8b8:	28 01       	movw	r4, r16
 8ba:	f2 e0       	ldi	r31, 0x02	; 2
 8bc:	4f 0e       	add	r4, r31
 8be:	51 1c       	adc	r5, r1
 8c0:	f8 01       	movw	r30, r16
 8c2:	a0 80       	ld	r10, Z
 8c4:	b1 80       	ldd	r11, Z+1	; 0x01
 8c6:	36 fe       	sbrs	r3, 6
 8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <__stack+0x71>
 8ca:	69 2d       	mov	r22, r9
 8cc:	70 e0       	ldi	r23, 0x00	; 0
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
 8d0:	6f ef       	ldi	r22, 0xFF	; 255
 8d2:	7f ef       	ldi	r23, 0xFF	; 255
 8d4:	c5 01       	movw	r24, r10
 8d6:	0e 94 b1 05 	call	0xb62	; 0xb62 <strnlen>
 8da:	4c 01       	movw	r8, r24
 8dc:	82 01       	movw	r16, r4
 8de:	f3 2d       	mov	r31, r3
 8e0:	ff 77       	andi	r31, 0x7F	; 127
 8e2:	3f 2e       	mov	r3, r31
 8e4:	16 c0       	rjmp	.+44     	; 0x912 <__stack+0xb3>
 8e6:	28 01       	movw	r4, r16
 8e8:	22 e0       	ldi	r18, 0x02	; 2
 8ea:	42 0e       	add	r4, r18
 8ec:	51 1c       	adc	r5, r1
 8ee:	f8 01       	movw	r30, r16
 8f0:	a0 80       	ld	r10, Z
 8f2:	b1 80       	ldd	r11, Z+1	; 0x01
 8f4:	36 fe       	sbrs	r3, 6
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <__stack+0x9f>
 8f8:	69 2d       	mov	r22, r9
 8fa:	70 e0       	ldi	r23, 0x00	; 0
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0xa3>
 8fe:	6f ef       	ldi	r22, 0xFF	; 255
 900:	7f ef       	ldi	r23, 0xFF	; 255
 902:	c5 01       	movw	r24, r10
 904:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strnlen_P>
 908:	4c 01       	movw	r8, r24
 90a:	f3 2d       	mov	r31, r3
 90c:	f0 68       	ori	r31, 0x80	; 128
 90e:	3f 2e       	mov	r3, r31
 910:	82 01       	movw	r16, r4
 912:	33 fc       	sbrc	r3, 3
 914:	1b c0       	rjmp	.+54     	; 0x94c <__stack+0xed>
 916:	82 2d       	mov	r24, r2
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	88 16       	cp	r8, r24
 91c:	99 06       	cpc	r9, r25
 91e:	b0 f4       	brcc	.+44     	; 0x94c <__stack+0xed>
 920:	b6 01       	movw	r22, r12
 922:	80 e2       	ldi	r24, 0x20	; 32
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	0e 94 bc 05 	call	0xb78	; 0xb78 <fputc>
 92a:	2a 94       	dec	r2
 92c:	f4 cf       	rjmp	.-24     	; 0x916 <__stack+0xb7>
 92e:	f5 01       	movw	r30, r10
 930:	37 fc       	sbrc	r3, 7
 932:	85 91       	lpm	r24, Z+
 934:	37 fe       	sbrs	r3, 7
 936:	81 91       	ld	r24, Z+
 938:	5f 01       	movw	r10, r30
 93a:	b6 01       	movw	r22, r12
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 bc 05 	call	0xb78	; 0xb78 <fputc>
 942:	21 10       	cpse	r2, r1
 944:	2a 94       	dec	r2
 946:	21 e0       	ldi	r18, 0x01	; 1
 948:	82 1a       	sub	r8, r18
 94a:	91 08       	sbc	r9, r1
 94c:	81 14       	cp	r8, r1
 94e:	91 04       	cpc	r9, r1
 950:	71 f7       	brne	.-36     	; 0x92e <__stack+0xcf>
 952:	e8 c0       	rjmp	.+464    	; 0xb24 <__stack+0x2c5>
 954:	84 36       	cpi	r24, 0x64	; 100
 956:	11 f0       	breq	.+4      	; 0x95c <__stack+0xfd>
 958:	89 36       	cpi	r24, 0x69	; 105
 95a:	41 f5       	brne	.+80     	; 0x9ac <__stack+0x14d>
 95c:	f8 01       	movw	r30, r16
 95e:	37 fe       	sbrs	r3, 7
 960:	07 c0       	rjmp	.+14     	; 0x970 <__stack+0x111>
 962:	60 81       	ld	r22, Z
 964:	71 81       	ldd	r23, Z+1	; 0x01
 966:	82 81       	ldd	r24, Z+2	; 0x02
 968:	93 81       	ldd	r25, Z+3	; 0x03
 96a:	0c 5f       	subi	r16, 0xFC	; 252
 96c:	1f 4f       	sbci	r17, 0xFF	; 255
 96e:	08 c0       	rjmp	.+16     	; 0x980 <__stack+0x121>
 970:	60 81       	ld	r22, Z
 972:	71 81       	ldd	r23, Z+1	; 0x01
 974:	07 2e       	mov	r0, r23
 976:	00 0c       	add	r0, r0
 978:	88 0b       	sbc	r24, r24
 97a:	99 0b       	sbc	r25, r25
 97c:	0e 5f       	subi	r16, 0xFE	; 254
 97e:	1f 4f       	sbci	r17, 0xFF	; 255
 980:	f3 2d       	mov	r31, r3
 982:	ff 76       	andi	r31, 0x6F	; 111
 984:	3f 2e       	mov	r3, r31
 986:	97 ff       	sbrs	r25, 7
 988:	09 c0       	rjmp	.+18     	; 0x99c <__stack+0x13d>
 98a:	90 95       	com	r25
 98c:	80 95       	com	r24
 98e:	70 95       	com	r23
 990:	61 95       	neg	r22
 992:	7f 4f       	sbci	r23, 0xFF	; 255
 994:	8f 4f       	sbci	r24, 0xFF	; 255
 996:	9f 4f       	sbci	r25, 0xFF	; 255
 998:	f0 68       	ori	r31, 0x80	; 128
 99a:	3f 2e       	mov	r3, r31
 99c:	2a e0       	ldi	r18, 0x0A	; 10
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	a3 01       	movw	r20, r6
 9a2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__ultoa_invert>
 9a6:	88 2e       	mov	r8, r24
 9a8:	86 18       	sub	r8, r6
 9aa:	45 c0       	rjmp	.+138    	; 0xa36 <__stack+0x1d7>
 9ac:	85 37       	cpi	r24, 0x75	; 117
 9ae:	31 f4       	brne	.+12     	; 0x9bc <__stack+0x15d>
 9b0:	23 2d       	mov	r18, r3
 9b2:	2f 7e       	andi	r18, 0xEF	; 239
 9b4:	b2 2e       	mov	r11, r18
 9b6:	2a e0       	ldi	r18, 0x0A	; 10
 9b8:	30 e0       	ldi	r19, 0x00	; 0
 9ba:	25 c0       	rjmp	.+74     	; 0xa06 <__stack+0x1a7>
 9bc:	93 2d       	mov	r25, r3
 9be:	99 7f       	andi	r25, 0xF9	; 249
 9c0:	b9 2e       	mov	r11, r25
 9c2:	8f 36       	cpi	r24, 0x6F	; 111
 9c4:	c1 f0       	breq	.+48     	; 0x9f6 <__stack+0x197>
 9c6:	18 f4       	brcc	.+6      	; 0x9ce <__stack+0x16f>
 9c8:	88 35       	cpi	r24, 0x58	; 88
 9ca:	79 f0       	breq	.+30     	; 0x9ea <__stack+0x18b>
 9cc:	b5 c0       	rjmp	.+362    	; 0xb38 <__stack+0x2d9>
 9ce:	80 37       	cpi	r24, 0x70	; 112
 9d0:	19 f0       	breq	.+6      	; 0x9d8 <__stack+0x179>
 9d2:	88 37       	cpi	r24, 0x78	; 120
 9d4:	21 f0       	breq	.+8      	; 0x9de <__stack+0x17f>
 9d6:	b0 c0       	rjmp	.+352    	; 0xb38 <__stack+0x2d9>
 9d8:	e9 2f       	mov	r30, r25
 9da:	e0 61       	ori	r30, 0x10	; 16
 9dc:	be 2e       	mov	r11, r30
 9de:	b4 fe       	sbrs	r11, 4
 9e0:	0d c0       	rjmp	.+26     	; 0x9fc <__stack+0x19d>
 9e2:	fb 2d       	mov	r31, r11
 9e4:	f4 60       	ori	r31, 0x04	; 4
 9e6:	bf 2e       	mov	r11, r31
 9e8:	09 c0       	rjmp	.+18     	; 0x9fc <__stack+0x19d>
 9ea:	34 fe       	sbrs	r3, 4
 9ec:	0a c0       	rjmp	.+20     	; 0xa02 <__stack+0x1a3>
 9ee:	29 2f       	mov	r18, r25
 9f0:	26 60       	ori	r18, 0x06	; 6
 9f2:	b2 2e       	mov	r11, r18
 9f4:	06 c0       	rjmp	.+12     	; 0xa02 <__stack+0x1a3>
 9f6:	28 e0       	ldi	r18, 0x08	; 8
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	05 c0       	rjmp	.+10     	; 0xa06 <__stack+0x1a7>
 9fc:	20 e1       	ldi	r18, 0x10	; 16
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <__stack+0x1a7>
 a02:	20 e1       	ldi	r18, 0x10	; 16
 a04:	32 e0       	ldi	r19, 0x02	; 2
 a06:	f8 01       	movw	r30, r16
 a08:	b7 fe       	sbrs	r11, 7
 a0a:	07 c0       	rjmp	.+14     	; 0xa1a <__stack+0x1bb>
 a0c:	60 81       	ld	r22, Z
 a0e:	71 81       	ldd	r23, Z+1	; 0x01
 a10:	82 81       	ldd	r24, Z+2	; 0x02
 a12:	93 81       	ldd	r25, Z+3	; 0x03
 a14:	0c 5f       	subi	r16, 0xFC	; 252
 a16:	1f 4f       	sbci	r17, 0xFF	; 255
 a18:	06 c0       	rjmp	.+12     	; 0xa26 <__stack+0x1c7>
 a1a:	60 81       	ld	r22, Z
 a1c:	71 81       	ldd	r23, Z+1	; 0x01
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	0e 5f       	subi	r16, 0xFE	; 254
 a24:	1f 4f       	sbci	r17, 0xFF	; 255
 a26:	a3 01       	movw	r20, r6
 a28:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__ultoa_invert>
 a2c:	88 2e       	mov	r8, r24
 a2e:	86 18       	sub	r8, r6
 a30:	fb 2d       	mov	r31, r11
 a32:	ff 77       	andi	r31, 0x7F	; 127
 a34:	3f 2e       	mov	r3, r31
 a36:	36 fe       	sbrs	r3, 6
 a38:	0d c0       	rjmp	.+26     	; 0xa54 <__stack+0x1f5>
 a3a:	23 2d       	mov	r18, r3
 a3c:	2e 7f       	andi	r18, 0xFE	; 254
 a3e:	a2 2e       	mov	r10, r18
 a40:	89 14       	cp	r8, r9
 a42:	58 f4       	brcc	.+22     	; 0xa5a <__stack+0x1fb>
 a44:	34 fe       	sbrs	r3, 4
 a46:	0b c0       	rjmp	.+22     	; 0xa5e <__stack+0x1ff>
 a48:	32 fc       	sbrc	r3, 2
 a4a:	09 c0       	rjmp	.+18     	; 0xa5e <__stack+0x1ff>
 a4c:	83 2d       	mov	r24, r3
 a4e:	8e 7e       	andi	r24, 0xEE	; 238
 a50:	a8 2e       	mov	r10, r24
 a52:	05 c0       	rjmp	.+10     	; 0xa5e <__stack+0x1ff>
 a54:	b8 2c       	mov	r11, r8
 a56:	a3 2c       	mov	r10, r3
 a58:	03 c0       	rjmp	.+6      	; 0xa60 <__stack+0x201>
 a5a:	b8 2c       	mov	r11, r8
 a5c:	01 c0       	rjmp	.+2      	; 0xa60 <__stack+0x201>
 a5e:	b9 2c       	mov	r11, r9
 a60:	a4 fe       	sbrs	r10, 4
 a62:	0f c0       	rjmp	.+30     	; 0xa82 <__stack+0x223>
 a64:	fe 01       	movw	r30, r28
 a66:	e8 0d       	add	r30, r8
 a68:	f1 1d       	adc	r31, r1
 a6a:	80 81       	ld	r24, Z
 a6c:	80 33       	cpi	r24, 0x30	; 48
 a6e:	21 f4       	brne	.+8      	; 0xa78 <__stack+0x219>
 a70:	9a 2d       	mov	r25, r10
 a72:	99 7e       	andi	r25, 0xE9	; 233
 a74:	a9 2e       	mov	r10, r25
 a76:	09 c0       	rjmp	.+18     	; 0xa8a <__stack+0x22b>
 a78:	a2 fe       	sbrs	r10, 2
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <__stack+0x229>
 a7c:	b3 94       	inc	r11
 a7e:	b3 94       	inc	r11
 a80:	04 c0       	rjmp	.+8      	; 0xa8a <__stack+0x22b>
 a82:	8a 2d       	mov	r24, r10
 a84:	86 78       	andi	r24, 0x86	; 134
 a86:	09 f0       	breq	.+2      	; 0xa8a <__stack+0x22b>
 a88:	b3 94       	inc	r11
 a8a:	a3 fc       	sbrc	r10, 3
 a8c:	11 c0       	rjmp	.+34     	; 0xab0 <__stack+0x251>
 a8e:	a0 fe       	sbrs	r10, 0
 a90:	06 c0       	rjmp	.+12     	; 0xa9e <__stack+0x23f>
 a92:	b2 14       	cp	r11, r2
 a94:	88 f4       	brcc	.+34     	; 0xab8 <__stack+0x259>
 a96:	28 0c       	add	r2, r8
 a98:	92 2c       	mov	r9, r2
 a9a:	9b 18       	sub	r9, r11
 a9c:	0e c0       	rjmp	.+28     	; 0xaba <__stack+0x25b>
 a9e:	b2 14       	cp	r11, r2
 aa0:	60 f4       	brcc	.+24     	; 0xaba <__stack+0x25b>
 aa2:	b6 01       	movw	r22, r12
 aa4:	80 e2       	ldi	r24, 0x20	; 32
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	0e 94 bc 05 	call	0xb78	; 0xb78 <fputc>
 aac:	b3 94       	inc	r11
 aae:	f7 cf       	rjmp	.-18     	; 0xa9e <__stack+0x23f>
 ab0:	b2 14       	cp	r11, r2
 ab2:	18 f4       	brcc	.+6      	; 0xaba <__stack+0x25b>
 ab4:	2b 18       	sub	r2, r11
 ab6:	02 c0       	rjmp	.+4      	; 0xabc <__stack+0x25d>
 ab8:	98 2c       	mov	r9, r8
 aba:	21 2c       	mov	r2, r1
 abc:	a4 fe       	sbrs	r10, 4
 abe:	10 c0       	rjmp	.+32     	; 0xae0 <__stack+0x281>
 ac0:	b6 01       	movw	r22, r12
 ac2:	80 e3       	ldi	r24, 0x30	; 48
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	0e 94 bc 05 	call	0xb78	; 0xb78 <fputc>
 aca:	a2 fe       	sbrs	r10, 2
 acc:	17 c0       	rjmp	.+46     	; 0xafc <__stack+0x29d>
 ace:	a1 fc       	sbrc	r10, 1
 ad0:	03 c0       	rjmp	.+6      	; 0xad8 <__stack+0x279>
 ad2:	88 e7       	ldi	r24, 0x78	; 120
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <__stack+0x27d>
 ad8:	88 e5       	ldi	r24, 0x58	; 88
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	b6 01       	movw	r22, r12
 ade:	0c c0       	rjmp	.+24     	; 0xaf8 <__stack+0x299>
 ae0:	8a 2d       	mov	r24, r10
 ae2:	86 78       	andi	r24, 0x86	; 134
 ae4:	59 f0       	breq	.+22     	; 0xafc <__stack+0x29d>
 ae6:	a1 fe       	sbrs	r10, 1
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <__stack+0x28f>
 aea:	8b e2       	ldi	r24, 0x2B	; 43
 aec:	01 c0       	rjmp	.+2      	; 0xaf0 <__stack+0x291>
 aee:	80 e2       	ldi	r24, 0x20	; 32
 af0:	a7 fc       	sbrc	r10, 7
 af2:	8d e2       	ldi	r24, 0x2D	; 45
 af4:	b6 01       	movw	r22, r12
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	0e 94 bc 05 	call	0xb78	; 0xb78 <fputc>
 afc:	89 14       	cp	r8, r9
 afe:	38 f4       	brcc	.+14     	; 0xb0e <__stack+0x2af>
 b00:	b6 01       	movw	r22, r12
 b02:	80 e3       	ldi	r24, 0x30	; 48
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 bc 05 	call	0xb78	; 0xb78 <fputc>
 b0a:	9a 94       	dec	r9
 b0c:	f7 cf       	rjmp	.-18     	; 0xafc <__stack+0x29d>
 b0e:	8a 94       	dec	r8
 b10:	f3 01       	movw	r30, r6
 b12:	e8 0d       	add	r30, r8
 b14:	f1 1d       	adc	r31, r1
 b16:	80 81       	ld	r24, Z
 b18:	b6 01       	movw	r22, r12
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	0e 94 bc 05 	call	0xb78	; 0xb78 <fputc>
 b20:	81 10       	cpse	r8, r1
 b22:	f5 cf       	rjmp	.-22     	; 0xb0e <__stack+0x2af>
 b24:	22 20       	and	r2, r2
 b26:	09 f4       	brne	.+2      	; 0xb2a <__stack+0x2cb>
 b28:	42 ce       	rjmp	.-892    	; 0x7ae <vfprintf+0x24>
 b2a:	b6 01       	movw	r22, r12
 b2c:	80 e2       	ldi	r24, 0x20	; 32
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	0e 94 bc 05 	call	0xb78	; 0xb78 <fputc>
 b34:	2a 94       	dec	r2
 b36:	f6 cf       	rjmp	.-20     	; 0xb24 <__stack+0x2c5>
 b38:	f6 01       	movw	r30, r12
 b3a:	86 81       	ldd	r24, Z+6	; 0x06
 b3c:	97 81       	ldd	r25, Z+7	; 0x07
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <__stack+0x2e5>
 b40:	8f ef       	ldi	r24, 0xFF	; 255
 b42:	9f ef       	ldi	r25, 0xFF	; 255
 b44:	2b 96       	adiw	r28, 0x0b	; 11
 b46:	e2 e1       	ldi	r30, 0x12	; 18
 b48:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__epilogue_restores__>

00000b4c <strnlen_P>:
 b4c:	fc 01       	movw	r30, r24
 b4e:	05 90       	lpm	r0, Z+
 b50:	61 50       	subi	r22, 0x01	; 1
 b52:	70 40       	sbci	r23, 0x00	; 0
 b54:	01 10       	cpse	r0, r1
 b56:	d8 f7       	brcc	.-10     	; 0xb4e <strnlen_P+0x2>
 b58:	80 95       	com	r24
 b5a:	90 95       	com	r25
 b5c:	8e 0f       	add	r24, r30
 b5e:	9f 1f       	adc	r25, r31
 b60:	08 95       	ret

00000b62 <strnlen>:
 b62:	fc 01       	movw	r30, r24
 b64:	61 50       	subi	r22, 0x01	; 1
 b66:	70 40       	sbci	r23, 0x00	; 0
 b68:	01 90       	ld	r0, Z+
 b6a:	01 10       	cpse	r0, r1
 b6c:	d8 f7       	brcc	.-10     	; 0xb64 <strnlen+0x2>
 b6e:	80 95       	com	r24
 b70:	90 95       	com	r25
 b72:	8e 0f       	add	r24, r30
 b74:	9f 1f       	adc	r25, r31
 b76:	08 95       	ret

00000b78 <fputc>:
 b78:	0f 93       	push	r16
 b7a:	1f 93       	push	r17
 b7c:	cf 93       	push	r28
 b7e:	df 93       	push	r29
 b80:	fb 01       	movw	r30, r22
 b82:	23 81       	ldd	r18, Z+3	; 0x03
 b84:	21 fd       	sbrc	r18, 1
 b86:	03 c0       	rjmp	.+6      	; 0xb8e <fputc+0x16>
 b88:	8f ef       	ldi	r24, 0xFF	; 255
 b8a:	9f ef       	ldi	r25, 0xFF	; 255
 b8c:	2c c0       	rjmp	.+88     	; 0xbe6 <fputc+0x6e>
 b8e:	22 ff       	sbrs	r18, 2
 b90:	16 c0       	rjmp	.+44     	; 0xbbe <fputc+0x46>
 b92:	46 81       	ldd	r20, Z+6	; 0x06
 b94:	57 81       	ldd	r21, Z+7	; 0x07
 b96:	24 81       	ldd	r18, Z+4	; 0x04
 b98:	35 81       	ldd	r19, Z+5	; 0x05
 b9a:	42 17       	cp	r20, r18
 b9c:	53 07       	cpc	r21, r19
 b9e:	44 f4       	brge	.+16     	; 0xbb0 <fputc+0x38>
 ba0:	a0 81       	ld	r26, Z
 ba2:	b1 81       	ldd	r27, Z+1	; 0x01
 ba4:	9d 01       	movw	r18, r26
 ba6:	2f 5f       	subi	r18, 0xFF	; 255
 ba8:	3f 4f       	sbci	r19, 0xFF	; 255
 baa:	31 83       	std	Z+1, r19	; 0x01
 bac:	20 83       	st	Z, r18
 bae:	8c 93       	st	X, r24
 bb0:	26 81       	ldd	r18, Z+6	; 0x06
 bb2:	37 81       	ldd	r19, Z+7	; 0x07
 bb4:	2f 5f       	subi	r18, 0xFF	; 255
 bb6:	3f 4f       	sbci	r19, 0xFF	; 255
 bb8:	37 83       	std	Z+7, r19	; 0x07
 bba:	26 83       	std	Z+6, r18	; 0x06
 bbc:	14 c0       	rjmp	.+40     	; 0xbe6 <fputc+0x6e>
 bbe:	8b 01       	movw	r16, r22
 bc0:	ec 01       	movw	r28, r24
 bc2:	fb 01       	movw	r30, r22
 bc4:	00 84       	ldd	r0, Z+8	; 0x08
 bc6:	f1 85       	ldd	r31, Z+9	; 0x09
 bc8:	e0 2d       	mov	r30, r0
 bca:	09 95       	icall
 bcc:	89 2b       	or	r24, r25
 bce:	e1 f6       	brne	.-72     	; 0xb88 <fputc+0x10>
 bd0:	d8 01       	movw	r26, r16
 bd2:	16 96       	adiw	r26, 0x06	; 6
 bd4:	8d 91       	ld	r24, X+
 bd6:	9c 91       	ld	r25, X
 bd8:	17 97       	sbiw	r26, 0x07	; 7
 bda:	01 96       	adiw	r24, 0x01	; 1
 bdc:	17 96       	adiw	r26, 0x07	; 7
 bde:	9c 93       	st	X, r25
 be0:	8e 93       	st	-X, r24
 be2:	16 97       	sbiw	r26, 0x06	; 6
 be4:	ce 01       	movw	r24, r28
 be6:	df 91       	pop	r29
 be8:	cf 91       	pop	r28
 bea:	1f 91       	pop	r17
 bec:	0f 91       	pop	r16
 bee:	08 95       	ret

00000bf0 <__ultoa_invert>:
 bf0:	fa 01       	movw	r30, r20
 bf2:	aa 27       	eor	r26, r26
 bf4:	28 30       	cpi	r18, 0x08	; 8
 bf6:	51 f1       	breq	.+84     	; 0xc4c <__ultoa_invert+0x5c>
 bf8:	20 31       	cpi	r18, 0x10	; 16
 bfa:	81 f1       	breq	.+96     	; 0xc5c <__ultoa_invert+0x6c>
 bfc:	e8 94       	clt
 bfe:	6f 93       	push	r22
 c00:	6e 7f       	andi	r22, 0xFE	; 254
 c02:	6e 5f       	subi	r22, 0xFE	; 254
 c04:	7f 4f       	sbci	r23, 0xFF	; 255
 c06:	8f 4f       	sbci	r24, 0xFF	; 255
 c08:	9f 4f       	sbci	r25, 0xFF	; 255
 c0a:	af 4f       	sbci	r26, 0xFF	; 255
 c0c:	b1 e0       	ldi	r27, 0x01	; 1
 c0e:	3e d0       	rcall	.+124    	; 0xc8c <__ultoa_invert+0x9c>
 c10:	b4 e0       	ldi	r27, 0x04	; 4
 c12:	3c d0       	rcall	.+120    	; 0xc8c <__ultoa_invert+0x9c>
 c14:	67 0f       	add	r22, r23
 c16:	78 1f       	adc	r23, r24
 c18:	89 1f       	adc	r24, r25
 c1a:	9a 1f       	adc	r25, r26
 c1c:	a1 1d       	adc	r26, r1
 c1e:	68 0f       	add	r22, r24
 c20:	79 1f       	adc	r23, r25
 c22:	8a 1f       	adc	r24, r26
 c24:	91 1d       	adc	r25, r1
 c26:	a1 1d       	adc	r26, r1
 c28:	6a 0f       	add	r22, r26
 c2a:	71 1d       	adc	r23, r1
 c2c:	81 1d       	adc	r24, r1
 c2e:	91 1d       	adc	r25, r1
 c30:	a1 1d       	adc	r26, r1
 c32:	20 d0       	rcall	.+64     	; 0xc74 <__ultoa_invert+0x84>
 c34:	09 f4       	brne	.+2      	; 0xc38 <__ultoa_invert+0x48>
 c36:	68 94       	set
 c38:	3f 91       	pop	r19
 c3a:	2a e0       	ldi	r18, 0x0A	; 10
 c3c:	26 9f       	mul	r18, r22
 c3e:	11 24       	eor	r1, r1
 c40:	30 19       	sub	r19, r0
 c42:	30 5d       	subi	r19, 0xD0	; 208
 c44:	31 93       	st	Z+, r19
 c46:	de f6       	brtc	.-74     	; 0xbfe <__ultoa_invert+0xe>
 c48:	cf 01       	movw	r24, r30
 c4a:	08 95       	ret
 c4c:	46 2f       	mov	r20, r22
 c4e:	47 70       	andi	r20, 0x07	; 7
 c50:	40 5d       	subi	r20, 0xD0	; 208
 c52:	41 93       	st	Z+, r20
 c54:	b3 e0       	ldi	r27, 0x03	; 3
 c56:	0f d0       	rcall	.+30     	; 0xc76 <__ultoa_invert+0x86>
 c58:	c9 f7       	brne	.-14     	; 0xc4c <__ultoa_invert+0x5c>
 c5a:	f6 cf       	rjmp	.-20     	; 0xc48 <__ultoa_invert+0x58>
 c5c:	46 2f       	mov	r20, r22
 c5e:	4f 70       	andi	r20, 0x0F	; 15
 c60:	40 5d       	subi	r20, 0xD0	; 208
 c62:	4a 33       	cpi	r20, 0x3A	; 58
 c64:	18 f0       	brcs	.+6      	; 0xc6c <__ultoa_invert+0x7c>
 c66:	49 5d       	subi	r20, 0xD9	; 217
 c68:	31 fd       	sbrc	r19, 1
 c6a:	40 52       	subi	r20, 0x20	; 32
 c6c:	41 93       	st	Z+, r20
 c6e:	02 d0       	rcall	.+4      	; 0xc74 <__ultoa_invert+0x84>
 c70:	a9 f7       	brne	.-22     	; 0xc5c <__ultoa_invert+0x6c>
 c72:	ea cf       	rjmp	.-44     	; 0xc48 <__ultoa_invert+0x58>
 c74:	b4 e0       	ldi	r27, 0x04	; 4
 c76:	a6 95       	lsr	r26
 c78:	97 95       	ror	r25
 c7a:	87 95       	ror	r24
 c7c:	77 95       	ror	r23
 c7e:	67 95       	ror	r22
 c80:	ba 95       	dec	r27
 c82:	c9 f7       	brne	.-14     	; 0xc76 <__ultoa_invert+0x86>
 c84:	00 97       	sbiw	r24, 0x00	; 0
 c86:	61 05       	cpc	r22, r1
 c88:	71 05       	cpc	r23, r1
 c8a:	08 95       	ret
 c8c:	9b 01       	movw	r18, r22
 c8e:	ac 01       	movw	r20, r24
 c90:	0a 2e       	mov	r0, r26
 c92:	06 94       	lsr	r0
 c94:	57 95       	ror	r21
 c96:	47 95       	ror	r20
 c98:	37 95       	ror	r19
 c9a:	27 95       	ror	r18
 c9c:	ba 95       	dec	r27
 c9e:	c9 f7       	brne	.-14     	; 0xc92 <__ultoa_invert+0xa2>
 ca0:	62 0f       	add	r22, r18
 ca2:	73 1f       	adc	r23, r19
 ca4:	84 1f       	adc	r24, r20
 ca6:	95 1f       	adc	r25, r21
 ca8:	a0 1d       	adc	r26, r0
 caa:	08 95       	ret

00000cac <__prologue_saves__>:
 cac:	2f 92       	push	r2
 cae:	3f 92       	push	r3
 cb0:	4f 92       	push	r4
 cb2:	5f 92       	push	r5
 cb4:	6f 92       	push	r6
 cb6:	7f 92       	push	r7
 cb8:	8f 92       	push	r8
 cba:	9f 92       	push	r9
 cbc:	af 92       	push	r10
 cbe:	bf 92       	push	r11
 cc0:	cf 92       	push	r12
 cc2:	df 92       	push	r13
 cc4:	ef 92       	push	r14
 cc6:	ff 92       	push	r15
 cc8:	0f 93       	push	r16
 cca:	1f 93       	push	r17
 ccc:	cf 93       	push	r28
 cce:	df 93       	push	r29
 cd0:	cd b7       	in	r28, 0x3d	; 61
 cd2:	de b7       	in	r29, 0x3e	; 62
 cd4:	ca 1b       	sub	r28, r26
 cd6:	db 0b       	sbc	r29, r27
 cd8:	0f b6       	in	r0, 0x3f	; 63
 cda:	f8 94       	cli
 cdc:	de bf       	out	0x3e, r29	; 62
 cde:	0f be       	out	0x3f, r0	; 63
 ce0:	cd bf       	out	0x3d, r28	; 61
 ce2:	09 94       	ijmp

00000ce4 <__epilogue_restores__>:
 ce4:	2a 88       	ldd	r2, Y+18	; 0x12
 ce6:	39 88       	ldd	r3, Y+17	; 0x11
 ce8:	48 88       	ldd	r4, Y+16	; 0x10
 cea:	5f 84       	ldd	r5, Y+15	; 0x0f
 cec:	6e 84       	ldd	r6, Y+14	; 0x0e
 cee:	7d 84       	ldd	r7, Y+13	; 0x0d
 cf0:	8c 84       	ldd	r8, Y+12	; 0x0c
 cf2:	9b 84       	ldd	r9, Y+11	; 0x0b
 cf4:	aa 84       	ldd	r10, Y+10	; 0x0a
 cf6:	b9 84       	ldd	r11, Y+9	; 0x09
 cf8:	c8 84       	ldd	r12, Y+8	; 0x08
 cfa:	df 80       	ldd	r13, Y+7	; 0x07
 cfc:	ee 80       	ldd	r14, Y+6	; 0x06
 cfe:	fd 80       	ldd	r15, Y+5	; 0x05
 d00:	0c 81       	ldd	r16, Y+4	; 0x04
 d02:	1b 81       	ldd	r17, Y+3	; 0x03
 d04:	aa 81       	ldd	r26, Y+2	; 0x02
 d06:	b9 81       	ldd	r27, Y+1	; 0x01
 d08:	ce 0f       	add	r28, r30
 d0a:	d1 1d       	adc	r29, r1
 d0c:	0f b6       	in	r0, 0x3f	; 63
 d0e:	f8 94       	cli
 d10:	de bf       	out	0x3e, r29	; 62
 d12:	0f be       	out	0x3f, r0	; 63
 d14:	cd bf       	out	0x3d, r28	; 61
 d16:	ed 01       	movw	r28, r26
 d18:	08 95       	ret

00000d1a <_exit>:
 d1a:	f8 94       	cli

00000d1c <__stop_program>:
 d1c:	ff cf       	rjmp	.-2      	; 0xd1c <__stop_program>
